{"version":3,"file":"static/js/3851.ee2f94b6.chunk.js","mappings":"iNA8BA,MA0CA,EA1CqBA,IAIM,IAJL,2BACpBC,EAA0B,WAC1BC,EAAU,eACVC,GACmBH,EACnB,MAAMI,GAAWC,EAAAA,EAAAA,OAMVC,EAAeC,IAAmBC,EAAAA,EAAAA,IALpBC,IAAMR,GAA2B,KAClCS,GAClBN,GAASO,EAAAA,EAAAA,IAAqBD,MAKhC,IAAKP,EACH,OAAO,KAST,OACES,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,MAAO,gBACPC,YAAa,SACbC,OAAQd,EACRe,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,IAAiB,IAC7BC,UAAWb,EACXc,UAboBC,KACtBd,EAAgB,SAAU,mBAAmBJ,IAAkB,CAC7DmB,KAAMnB,GACN,EAWAoB,QAtBYA,IAAMtB,GAA2B,GAuB7CuB,qBACEC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,CAAC,2CAC+Bf,EAAAA,EAAAA,KAAA,KAAAe,SAAIxB,IAAmB,MAAES,EAAAA,EAAAA,KAAA,SAAM,kDAI1E,C,6DC5DN,MAuBA,EAvBeJ,CACboB,EACAC,KAEA,MAAOV,EAAWW,IAAgBC,EAAAA,EAAAA,WAAkB,GAgBpD,MAAO,CAACZ,EAdQa,CAACC,EAAgBC,EAAaC,EAAYC,KACxDN,GAAa,GACbO,EAAAA,EACGC,OAAOL,EAAQC,EAAKC,EAAMC,GAC1BG,MAAMC,IACLV,GAAa,GACbF,EAAUY,EAAI,IAEfC,OAAO/B,IACNoB,GAAa,GACbD,EAAQnB,EAAI,GACZ,EAGqB,C","sources":["screens/Console/Buckets/ListBuckets/DeleteBucket.tsx","screens/Console/Common/Hooks/useApi.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\ninterface IDeleteBucketProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n}\n\nconst DeleteBucket = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n}: IDeleteBucketProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    invokeDeleteApi(\"DELETE\", `/api/v1/buckets/${selectedBucket}`, {\n      name: selectedBucket,\n    });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Bucket`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete bucket <b>{selectedBucket}</b>? <br />\n          A bucket can only be deleted if it's empty.\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteBucket;\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction,\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any, headers?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data, headers)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n"],"names":["_ref","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","dispatch","useAppDispatch","deleteLoading","invokeDeleteApi","useApi","onDelSuccess","err","setErrorSnackMessage","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","name","onClose","confirmationContent","_jsxs","Fragment","children","onSuccess","onError","setIsLoading","useState","callApi","method","url","data","headers","api","invoke","then","res","catch"],"sourceRoot":""}