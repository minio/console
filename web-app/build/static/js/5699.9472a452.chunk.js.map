{"version":3,"file":"static/js/5699.9472a452.chunk.js","mappings":"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","sources":["screens/Console/IDP/AddIDPConfigurationHelpbox.tsx","screens/Console/IDP/DeleteIDPConfigurationModal.tsx","screens/Console/IDP/IDPConfigurationDetails.tsx","screens/Console/IDP/IDPOpenIDConfigurationDetails.tsx","screens/Console/IDP/utils.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpIconFilled, Box } from \"mds\";\n\ninterface IContent {\n  icon: React.ReactNode;\n  text: string;\n  iconDescription: string;\n}\n\ninterface IAddIDPConfigurationHelpBoxProps {\n  helpText: string;\n  docLink: string;\n  docText: string;\n  contents: IContent[];\n}\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\n\nconst AddIDPConfigurationHelpBox = ({\n  helpText,\n  docLink,\n  docText,\n  contents,\n}: IAddIDPConfigurationHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content, index) => (\n          <Fragment key={`feature-item-${index}`}>\n            {content.icon && (\n              <Box sx={{ paddingBottom: \"20px\" }}>\n                <FeatureItem\n                  icon={content.icon}\n                  description={content.iconDescription}\n                />\n              </Box>\n            )}\n            <Box sx={{ paddingBottom: \"20px\" }}>{content.text}</Box>\n          </Fragment>\n        ))}\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <a href={docLink} target=\"_blank\" rel=\"noopener\">\n            {docText}\n          </a>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddIDPConfigurationHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { SetIDPResponse } from \"../../../api/consoleApi\";\nimport { errorToHandler } from \"../../../api/errors\";\n\ninterface IDeleteIDPConfigurationModalProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  idp: string;\n  idpType: string;\n}\n\nconst DeleteIDPConfigurationModal = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  idp,\n  idpType,\n}: IDeleteIDPConfigurationModalProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = (res: SetIDPResponse) => {\n    closeDeleteModalAndRefresh(true);\n    dispatch(setServerNeedsRestart(res.restart === true));\n  };\n\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n\n  if (!idp) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    setDeleteLoading(true);\n    api.idp\n      .deleteConfiguration(idp, idpType)\n      .then((res) => {\n        onDelSuccess(res.data);\n      })\n      .catch((err) => dispatch(setErrorSnackMessage(errorToHandler(err.error))))\n      .finally(() => setDeleteLoading(false));\n  };\n\n  const displayName = idp === \"_\" ? \"Default\" : idp;\n\n  return (\n    <ConfirmDialog\n      title={`Delete ${displayName}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: deleteLoading,\n      }}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete IDP <b>{displayName}</b>{\" \"}\n          configuration? <br />\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteIDPConfigurationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  BackLink,\n  Box,\n  breakPoints,\n  Button,\n  ConsoleIcon,\n  EditIcon,\n  FormLayout,\n  Grid,\n  HelpBox,\n  InputBox,\n  PageLayout,\n  RefreshIcon,\n  ScreenTitle,\n  Switch,\n  Tooltip,\n  TrashIcon,\n  ValuePair,\n  WarnIcon,\n} from \"mds\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { useAppDispatch } from \"../../../store\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport DeleteIDPConfigurationModal from \"./DeleteIDPConfigurationModal\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport { api } from \"api\";\nimport {\n  ApiError,\n  HttpResponse,\n  IdpServerConfiguration,\n  SetIDPResponse,\n} from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\n\ntype IDPConfigurationDetailsProps = {\n  formFields: object;\n  endpoint: string;\n  backLink: string;\n  header: string;\n  idpType: string;\n  helpBox: React.ReactNode;\n  icon: React.ReactNode;\n};\n\nconst IDPConfigurationDetails = ({\n  formFields,\n  endpoint,\n  backLink,\n  header,\n  idpType,\n  icon,\n  helpBox,\n}: IDPConfigurationDetailsProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const configurationName = params.idpName;\n\n  const [loadingDetails, setLoadingDetails] = useState<boolean>(true);\n  const [loadingSave, setLoadingSave] = useState<boolean>(false);\n  const [loadingEnabledSave, setLoadingEnabledSave] = useState<boolean>(false);\n  const [isEnabled, setIsEnabled] = useState<boolean>(false);\n  const [fields, setFields] = useState<any>({});\n  const [overrideFields, setOverrideFields] = useState<any>({});\n  const [originalFields, setOriginalFields] = useState<any>({});\n  const [record, setRecord] = useState<any>({});\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [envOverride, setEnvOverride] = useState<boolean>(false);\n\n  const parseFields = useCallback(\n    (record: any) => {\n      let fields: any = {};\n      let overrideFields: any = {};\n      let totEnv = 0;\n\n      if (record.info) {\n        record.info.forEach((item: any) => {\n          if (item.key === \"enable\") {\n            setIsEnabled(item.value === \"on\");\n          }\n\n          if (item.isEnv) {\n            overrideFields[item.key] =\n              `MINIO_IDENTITY_OPENID_${item.key.toUpperCase()}${\n                configurationName !== \"_\" ? `_${configurationName}` : \"\"\n              }`;\n            totEnv++;\n          }\n\n          fields[item.key] = item.value;\n        });\n\n        if (totEnv > 0) {\n          setEnvOverride(true);\n        }\n      }\n      setFields(fields);\n      setOverrideFields(overrideFields);\n    },\n    [configurationName],\n  );\n\n  const toggleEditMode = () => {\n    if (editMode) {\n      parseFields(record);\n    }\n    setEditMode(!editMode);\n  };\n\n  const parseOriginalFields = (record: any) => {\n    let fields: any = {};\n    if (record.info) {\n      record.info.forEach((item: any) => {\n        fields[item.key] = item.value;\n      });\n    }\n    setOriginalFields(fields);\n  };\n\n  useEffect(() => {\n    const loadRecord = () => {\n      api.idp\n        .getConfiguration(configurationName || \"\", \"openid\")\n        .then((res: HttpResponse<IdpServerConfiguration, ApiError>) => {\n          if (res.data) {\n            setRecord(res.data);\n            parseFields(res.data);\n            parseOriginalFields(res.data);\n          }\n        })\n        .catch((res: HttpResponse<IdpServerConfiguration, ApiError>) => {\n          dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n        })\n        .finally(() => setLoadingDetails(false));\n    };\n\n    if (loadingDetails) {\n      loadRecord();\n    }\n  }, [dispatch, loadingDetails, configurationName, endpoint, parseFields]);\n\n  const validSave = () => {\n    for (const [key, value] of Object.entries(formFields)) {\n      if (\n        value.required &&\n        !(\n          fields[key] !== undefined &&\n          fields[key] !== null &&\n          fields[key] !== \"\"\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const resetForm = () => {\n    setFields({});\n  };\n\n  const saveRecord = (event: React.FormEvent) => {\n    setLoadingSave(true);\n    event.preventDefault();\n    let input = \"\";\n    for (const key of Object.keys(formFields)) {\n      if (fields[key] || fields[key] !== originalFields[key]) {\n        input += `${key}=${fields[key]} `;\n      }\n    }\n\n    api.idp\n      .updateConfiguration(configurationName || \"\", \"openid\", { input })\n      .then((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        if (res.data) {\n          dispatch(setServerNeedsRestart(res.data.restart === true));\n          setEditMode(false);\n        }\n      })\n      .catch(async (res: HttpResponse<SetIDPResponse, ApiError>) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n      })\n      .finally(() => setLoadingSave(false));\n  };\n\n  const closeDeleteModalAndRefresh = async (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      navigate(backLink);\n    }\n  };\n\n  const toggleConfiguration = (value: boolean) => {\n    setLoadingEnabledSave(true);\n    const input = `enable=${value ? \"on\" : \"off\"}`;\n\n    api.idp\n      .updateConfiguration(configurationName || \"\", \"openid\", { input: input })\n      .then((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        if (res.data) {\n          setIsEnabled(!isEnabled);\n          dispatch(setServerNeedsRestart(res.data.restart === true));\n        }\n      })\n      .catch((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n      })\n      .finally(() => setLoadingEnabledSave(false));\n  };\n\n  const renderFormField = (key: string, value: any) => {\n    switch (value.type) {\n      case \"toggle\":\n        return (\n          <Switch\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={fields[key] === \"on\"}\n            value={\"is-field-enabled\"}\n            id={\"is-field-enabled\"}\n            name={\"is-field-enabled\"}\n            label={value.label}\n            tooltip={value.tooltip}\n            onChange={(e) =>\n              setFields({ ...fields, [key]: e.target.checked ? \"on\" : \"off\" })\n            }\n            description=\"\"\n            disabled={!editMode}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            id={key}\n            required={value.required}\n            name={key}\n            label={value.label}\n            tooltip={value.tooltip}\n            error={value.hasError(fields[key], editMode)}\n            value={fields[key] ? fields[key] : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setFields({ ...fields, [key]: e.target.value })\n            }\n            placeholder={value.placeholder}\n            disabled={!editMode}\n            type={value.type}\n          />\n        );\n    }\n  };\n\n  const renderEditForm = () => {\n    return (\n      <FormLayout helpBox={helpBox}>\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            saveRecord(e);\n          }}\n        >\n          <Grid container>\n            {editMode ? (\n              <Grid item xs={12} sx={{ marginBottom: 15 }}>\n                <HelpBox\n                  title={\n                    <Box\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                        flexGrow: 1,\n                      }}\n                    >\n                      Client Secret must be re-entered to change OpenID\n                      configurations\n                    </Box>\n                  }\n                  iconComponent={<WarnIcon />}\n                  help={null}\n                />\n              </Grid>\n            ) : null}\n            <Grid xs={12} item>\n              {Object.entries(formFields).map(([key, value]) =>\n                renderFormField(key, value),\n              )}\n              <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n                {editMode && (\n                  <Button\n                    id={\"clear\"}\n                    type=\"button\"\n                    variant=\"regular\"\n                    onClick={resetForm}\n                    label={\"Clear\"}\n                  />\n                )}\n                {editMode && (\n                  <Button\n                    id={\"cancel\"}\n                    type=\"button\"\n                    variant=\"regular\"\n                    onClick={toggleEditMode}\n                    label={\"Cancel\"}\n                  />\n                )}\n                {editMode && (\n                  <Button\n                    id={\"save-key\"}\n                    type=\"submit\"\n                    variant=\"callAction\"\n                    color=\"primary\"\n                    disabled={loadingDetails || loadingSave || !validSave()}\n                    label={\"Save\"}\n                  />\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      </FormLayout>\n    );\n  };\n  const renderViewForm = () => {\n    return (\n      <Box\n        withBorders\n        sx={{\n          display: \"grid\",\n          gridTemplateColumns: \"1fr\",\n          gridAutoFlow: \"dense\",\n          gap: 3,\n          padding: \"15px\",\n          [`@media (min-width: ${breakPoints.sm}px)`]: {\n            gridTemplateColumns: \"2fr 1fr\",\n            gridAutoFlow: \"row\",\n          },\n        }}\n      >\n        {Object.entries(formFields).map(([key, value]) => {\n          if (!value.editOnly) {\n            let label: React.ReactNode = value.label;\n            let val: React.ReactNode = fields[key] ? fields[key] : \"\";\n\n            if (value.type === \"toggle\" && fields[key]) {\n              if (val !== \"on\") {\n                val = \"Off\";\n              } else {\n                val = \"On\";\n              }\n            }\n\n            if (overrideFields[key]) {\n              label = (\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: 5,\n                    \"& .min-icon\": {\n                      height: 20,\n                      width: 20,\n                    },\n                    \"& span\": {\n                      height: 20,\n                      display: \"flex\",\n                      alignItems: \"center\",\n                    },\n                  }}\n                >\n                  <span>{value.label}</span>\n                  <Tooltip\n                    tooltip={`This value is set from the ${overrideFields[key]} environment variable`}\n                    placement={\"right\"}\n                  >\n                    <span className={\"muted\"}>\n                      <ConsoleIcon />\n                    </span>\n                  </Tooltip>\n                </Box>\n              );\n\n              val = (\n                <i>\n                  <span className={\"muted\"}>{val}</span>\n                </i>\n              );\n            }\n            return <ValuePair key={key} label={label} value={val} />;\n          }\n          return null;\n        })}\n      </Box>\n    );\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"idp_config\"));\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      {deleteOpen && configurationName && (\n        <DeleteIDPConfigurationModal\n          deleteOpen={deleteOpen}\n          idp={configurationName}\n          idpType={idpType}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={<BackLink onClick={() => navigate(backLink)} label={header} />}\n          actions={<HelpMenu />}\n        />\n        <PageLayout>\n          <ScreenTitle\n            icon={icon}\n            title={\n              configurationName === \"_\" ? \"Default\" : configurationName || \"\"\n            }\n            subTitle={null}\n            actions={\n              <Fragment>\n                {configurationName !== \"_\" && (\n                  <Tooltip\n                    tooltip={\n                      envOverride\n                        ? \"This configuration cannot be deleted using this module as this was set using OpenID environment variables.\"\n                        : \"\"\n                    }\n                  >\n                    <Button\n                      id={\"delete-idp-config\"}\n                      onClick={() => {\n                        setDeleteOpen(true);\n                      }}\n                      label={\"Delete Configuration\"}\n                      icon={<TrashIcon />}\n                      variant={\"secondary\"}\n                      disabled={envOverride}\n                    />\n                  </Tooltip>\n                )}\n                {!editMode && (\n                  <Tooltip\n                    tooltip={\n                      envOverride\n                        ? \"Configuration cannot be edited in this module as OpenID environment variables are set for this MinIO instance.\"\n                        : \"\"\n                    }\n                  >\n                    <Button\n                      id={\"edit\"}\n                      type=\"button\"\n                      variant={\"callAction\"}\n                      icon={<EditIcon />}\n                      onClick={toggleEditMode}\n                      label={\"Edit\"}\n                      disabled={envOverride}\n                    />\n                  </Tooltip>\n                )}\n                <Tooltip\n                  tooltip={\n                    envOverride\n                      ? \"Configuration cannot be disabled / enabled in this module as OpenID environment variables are set for this MinIO instance.\"\n                      : \"\"\n                  }\n                >\n                  <Button\n                    id={\"is-configuration-enabled\"}\n                    onClick={() => toggleConfiguration(!isEnabled)}\n                    label={isEnabled ? \"Disable\" : \"Enable\"}\n                    disabled={loadingEnabledSave || envOverride}\n                  />\n                </Tooltip>\n                <Button\n                  id={\"refresh-idp-config\"}\n                  onClick={() => setLoadingDetails(true)}\n                  label={\"Refresh\"}\n                  icon={<RefreshIcon />}\n                />\n              </Fragment>\n            }\n            sx={{\n              marginBottom: 15,\n            }}\n          />\n          {editMode ? renderEditForm() : renderViewForm()}\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default IDPConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { LockIcon } from \"mds\";\nimport { openIDFormFields, openIDHelpBoxContents } from \"./utils\";\nimport IDPConfigurationDetails from \"./IDPConfigurationDetails\";\nimport AddIDPConfigurationHelpBox from \"./AddIDPConfigurationHelpbox\";\n\nconst IDPOpenIDConfigurationDetails = () => {\n  return (\n    <IDPConfigurationDetails\n      backLink={IAM_PAGES.IDP_OPENID_CONFIGURATIONS}\n      header={\"OpenID Configurations\"}\n      endpoint={\"/api/v1/idp/openid/\"}\n      idpType={\"openid\"}\n      helpBox={\n        <AddIDPConfigurationHelpBox\n          helpText={\"Learn more about OpenID Connect Configurations\"}\n          contents={openIDHelpBoxContents}\n          docLink={\n            \"https://min.io/docs/minio/linux/operations/external-iam.html?ref=con#minio-external-iam-oidc\"\n          }\n          docText={\"Learn more about OpenID Connect Configurations\"}\n        />\n      }\n      formFields={openIDFormFields}\n      icon={<LockIcon width={40} />}\n    />\n  );\n};\n\nexport default IDPOpenIDConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { LockIcon, LoginIcon } from \"mds\";\n\nexport const ldapHelpBoxContents = [\n  {\n    text: \"MinIO supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: <LoginIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"MinIO queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. MinIO supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries\",\n    icon: null,\n    iconDescription: \"\",\n  },\n  {\n    text: \"MinIO recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDHelpBoxContents = [\n  {\n    text: \"MinIO supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.\",\n    icon: <LockIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDFormFields = {\n  config_url: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Config URL is required\" : \"\";\n    },\n    label: \"Config URL\",\n    tooltip: \"Config URL for identity provider configuration\",\n    placeholder:\n      \"https://identity-provider-url/.well-known/openid-configuration\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_id: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client ID is required\" : \"\";\n    },\n    label: \"Client ID\",\n    tooltip: \"Identity provider Client ID\",\n    placeholder: \"Enter Client ID\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_secret: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client Secret is required\" : \"\";\n    },\n    label: \"Client Secret\",\n    tooltip: \"Identity provider Client Secret\",\n    placeholder: \"Enter Client Secret\",\n    type: \"password\",\n    editOnly: true,\n  },\n  claim_name: {\n    required: false,\n    label: \"Claim Name\",\n    tooltip: \"Claim from which MinIO will read the policy or role to use\",\n    placeholder: \"Enter Claim Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  display_name: {\n    required: false,\n    label: \"Display Name\",\n    tooltip: \"\",\n    placeholder: \"Enter Display Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_prefix: {\n    required: false,\n    label: \"Claim Prefix\",\n    tooltip: \"\",\n    placeholder: \"Enter Claim Prefix\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  scopes: {\n    required: false,\n    label: \"Scopes\",\n    tooltip: \"\",\n    placeholder: \"openid,profile,email\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri: {\n    required: false,\n    label: \"Redirect URI\",\n    tooltip: \"\",\n    placeholder: \"https://console-endpoint-url/oauth_callback\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  role_policy: {\n    required: false,\n    label: \"Role Policy\",\n    tooltip: \"\",\n    placeholder: \"readonly\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_userinfo: {\n    required: false,\n    label: \"Claim User Info\",\n    tooltip: \"\",\n    placeholder: \"Claim User Info\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri_dynamic: {\n    required: false,\n    label: \"Redirect URI Dynamic\",\n    tooltip: \"\",\n    placeholder: \"Redirect URI Dynamic\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n};\n\nexport const ldapFormFields = {\n  server_insecure: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Insecure\",\n    tooltip: \"Disable SSL certificate verification \",\n    placeholder: \"myldapserver.com:636\",\n    type: \"toggle\",\n    editOnly: false,\n  },\n  server_addr: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Address\",\n    tooltip: 'AD/LDAP server address e.g. \"myldapserver.com:636\"',\n    placeholder: \"myldapserver.com:636\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind DN is required\" : \"\";\n    },\n    label: \"Lookup Bind DN\",\n    tooltip:\n      \"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"cn=admin,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_password: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind Password is required\" : \"\";\n    },\n    label: \"Lookup Bind Password\",\n    tooltip:\n      \"Password for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"admin\",\n    type: \"password\",\n    editOnly: true,\n  },\n  user_dn_search_base_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Base DN is required\" : \"\";\n    },\n    label: \"User DN Search Base\",\n    tooltip: \"\",\n    placeholder: \"DC=example,DC=net\",\n    type: \"text\",\n    editOnly: false,\n  },\n  user_dn_search_filter: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Filter is required\" : \"\";\n    },\n    label: \"User DN Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(sAMAcountName=%s)\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_base_dn: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Base DN\",\n    tooltip: \"\",\n    placeholder: \"ou=swengg,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_filter: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(&(objectclass=groupofnames)(member=%d))\",\n    type: \"text\",\n    editOnly: false,\n  },\n};\n"],"names":["FeatureItem","_ref","icon","description","_jsxs","Box","sx","display","marginRight","height","width","marginBottom","children","_jsx","style","fontSize","fontStyle","color","_ref2","helpText","docLink","docText","contents","flex","border","borderRadius","flexFlow","padding","fontWeight","alignItems","paddingBottom","HelpIconFilled","map","content","index","Fragment","iconDescription","text","href","target","rel","closeDeleteModalAndRefresh","deleteOpen","idp","idpType","dispatch","useAppDispatch","deleteLoading","setDeleteLoading","useState","displayName","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","api","deleteConfiguration","then","res","setServerNeedsRestart","restart","onDelSuccess","data","catch","err","setErrorSnackMessage","errorToHandler","error","finally","onClose","confirmButtonProps","disabled","confirmationContent","formFields","endpoint","backLink","header","helpBox","navigate","useNavigate","configurationName","useParams","idpName","loadingDetails","setLoadingDetails","loadingSave","setLoadingSave","loadingEnabledSave","setLoadingEnabledSave","isEnabled","setIsEnabled","fields","setFields","overrideFields","setOverrideFields","originalFields","setOriginalFields","record","setRecord","editMode","setEditMode","setDeleteOpen","envOverride","setEnvOverride","parseFields","useCallback","totEnv","info","forEach","item","key","value","isEnv","toUpperCase","toggleEditMode","useEffect","loadRecord","getConfiguration","parseOriginalFields","validSave","Object","entries","required","undefined","resetForm","setHelpName","DeleteIDPConfigurationModal","async","refresh","Grid","xs","PageHeaderWrapper","label","BackLink","onClick","actions","HelpMenu","PageLayout","ScreenTitle","subTitle","Tooltip","tooltip","Button","id","TrashIcon","variant","type","EditIcon","input","updateConfiguration","toggleConfiguration","RefreshIcon","FormLayout","noValidate","autoComplete","onSubmit","e","event","preventDefault","keys","saveRecord","container","HelpBox","justifyContent","flexGrow","iconComponent","WarnIcon","help","renderFormField","Switch","indicatorLabels","checked","name","onChange","InputBox","hasError","placeholder","modalStyleUtils","modalButtonBar","withBorders","gridTemplateColumns","gridAutoFlow","gap","breakPoints","sm","_ref3","editOnly","val","placement","className","ConsoleIcon","ValuePair","IDPOpenIDConfigurationDetails","IDPConfigurationDetails","IAM_PAGES","IDP_OPENID_CONFIGURATIONS","AddIDPConfigurationHelpBox","openIDHelpBoxContents","openIDFormFields","LockIcon","ldapHelpBoxContents","LoginIcon","config_url","s","client_id","client_secret","claim_name","display_name","claim_prefix","scopes","redirect_uri","role_policy","claim_userinfo","redirect_uri_dynamic","ldapFormFields","server_insecure","server_addr","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter"],"sourceRoot":""}