{"version":3,"file":"static/js/6799.c970e1e8.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EditAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { AddAccessRuleIcon, Button, FormLayout, Grid, Select } from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface IEditAccessRule {\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  toEdit: string;\n  initial: string;\n}\n\nconst EditAccessRule = ({\n  modalOpen,\n  onClose,\n  bucket,\n  toEdit,\n  initial,\n}: IEditAccessRule) => {\n  const dispatch = useAppDispatch();\n  const [selectedAccess, setSelectedAccess] = useState<any>(initial);\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setSelectedAccess(initial);\n  };\n\n  const createProcess = () => {\n    api.bucket\n      .setAccessRuleWithBucket(bucket, {\n        prefix: toEdit,\n        access: selectedAccess,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        onClose();\n      });\n  };\n\n  return (\n    <Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title={`Edit Anonymous Access Rule for ${`${bucket}/${toEdit || \"\"}`}`}\n        onClose={onClose}\n        titleIcon={<AddAccessRuleIcon />}\n      >\n        <FormLayout containerPadding={false} withBorders={false}>\n          <Select\n            id=\"access\"\n            name=\"Access\"\n            onChange={(value) => {\n              setSelectedAccess(value);\n            }}\n            label=\"Access\"\n            value={selectedAccess}\n            options={accessOptions}\n            disabled={false}\n          />\n        </FormLayout>\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n          <Button\n            id={\"save\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            onClick={createProcess}\n            label={\"Save\"}\n          />\n        </Grid>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default EditAccessRule;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","modalOpen","onClose","bucket","toEdit","initial","dispatch","useAppDispatch","selectedAccess","setSelectedAccess","useState","_jsx","Fragment","children","_jsxs","ModalWrapper","title","titleIcon","AddAccessRuleIcon","FormLayout","containerPadding","withBorders","Select","id","name","onChange","value","label","options","disabled","Grid","item","xs","sx","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","resetForm","createProcess","api","setAccessRuleWithBucket","prefix","access","then","catch","err","setErrorSnackMessage","errorToHandler","error","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","detailedErrorMsg","length","ModalBox","open","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}