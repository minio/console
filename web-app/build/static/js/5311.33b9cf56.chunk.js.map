{"version":3,"file":"static/js/5311.33b9cf56.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableVersioningModal.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { Box, Button, FormLayout, ModalBox, Switch } from \"mds\";\nimport { BucketVersioningResponse } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport CSVMultiSelector from \"../../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\n\ninterface IVersioningEventProps {\n  closeVersioningModalAndRefresh: (refresh: boolean) => void;\n  modalOpen: boolean;\n  selectedBucket: string;\n  versioningInfo: BucketVersioningResponse | undefined;\n  objectLockingEnabled: boolean;\n}\n\nconst parseExcludedPrefixes = (\n  bucketVersioning: BucketVersioningResponse | undefined,\n) => {\n  const excludedPrefixes = bucketVersioning?.excludedPrefixes;\n\n  if (excludedPrefixes) {\n    return excludedPrefixes.map((item) => item.prefix).join(\",\");\n  }\n\n  return \"\";\n};\n\nconst EnableVersioningModal = ({\n  closeVersioningModalAndRefresh,\n  modalOpen,\n  selectedBucket,\n  versioningInfo = {},\n  objectLockingEnabled,\n}: IVersioningEventProps) => {\n  const dispatch = useAppDispatch();\n\n  const [versioningLoading, setVersioningLoading] = useState<boolean>(false);\n  const [versionState, setVersionState] = useState<boolean>(\n    versioningInfo?.status === \"Enabled\",\n  );\n  const [excludeFolders, setExcludeFolders] = useState<boolean>(\n    !!versioningInfo?.excludeFolders,\n  );\n  const [excludedPrefixes, setExcludedPrefixes] = useState<string>(\n    parseExcludedPrefixes(versioningInfo),\n  );\n\n  const enableVersioning = () => {\n    if (versioningLoading) {\n      return;\n    }\n    setVersioningLoading(true);\n\n    api.buckets\n      .setBucketVersioning(selectedBucket, {\n        enabled: versionState,\n        excludeFolders: versionState ? excludeFolders : false,\n        excludePrefixes: versionState\n          ? excludedPrefixes.split(\",\").filter((item) => item.trim() !== \"\")\n          : [],\n      })\n      .then(() => {\n        setVersioningLoading(false);\n        closeVersioningModalAndRefresh(true);\n      })\n      .catch((err) => {\n        setVersioningLoading(false);\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const resetForm = () => {\n    setExcludedPrefixes(\"\");\n    setExcludeFolders(false);\n    setVersionState(false);\n  };\n\n  return (\n    <ModalBox\n      onClose={() => closeVersioningModalAndRefresh(false)}\n      open={modalOpen}\n      title={`Versioning on Bucket`}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Switch\n          id={\"activateVersioning\"}\n          label={\"Versioning Status\"}\n          checked={versionState}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setVersionState(e.target.checked);\n          }}\n          indicatorLabels={[\"Enabled\", \"Disabled\"]}\n        />\n        {versionState && !objectLockingEnabled && (\n          <Fragment>\n            <Switch\n              id={\"excludeFolders\"}\n              label={\"Exclude Folders\"}\n              checked={excludeFolders}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setExcludeFolders(e.target.checked);\n              }}\n              indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            />\n            <CSVMultiSelector\n              elements={excludedPrefixes}\n              label={\"Excluded Prefixes\"}\n              name={\"excludedPrefixes\"}\n              onChange={(value: string | string[]) => {\n                let valCh = \"\";\n\n                if (Array.isArray(value)) {\n                  valCh = value.join(\",\");\n                } else {\n                  valCh = value;\n                }\n                setExcludedPrefixes(valCh);\n              }}\n              withBorder={true}\n            />\n          </Fragment>\n        )}\n        <Box sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            color=\"primary\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"callAction\"\n            onClick={enableVersioning}\n            id=\"saveTag\"\n            label={\"Save\"}\n          />\n        </Box>\n      </FormLayout>\n    </ModalBox>\n  );\n};\n\nexport default EnableVersioningModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  Fragment,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { AddIcon, Box, HelpIcon, InputBox, InputLabel, Tooltip } from \"mds\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange],\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <InputBox\n        key={`csv-multi-${name}-${index.toString()}`}\n        id={`${name}-${index.toString()}`}\n        label={\"\"}\n        name={`${name}-${index.toString()}`}\n        value={currentElements[index]}\n        onChange={onChangeElement}\n        index={index}\n        placeholder={commonPlaceholder}\n        overlayIcon={index === currentElements.length - 1 ? <AddIcon /> : null}\n        overlayAction={() => {\n          addEmptyLine(currentElements);\n        }}\n      />\n    );\n  });\n\n  return (\n    <Fragment>\n      <Box sx={{ display: \"flex\" }} className={\"inputItem\"}>\n        <InputLabel\n          sx={{\n            alignItems: \"flex-start\",\n          }}\n        >\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <Box className={tooltip}>\n                  <HelpIcon />\n                </Box>\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            width: \"100%\",\n            overflowY: \"auto\",\n            height: 150,\n            position: \"relative\",\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Box>\n    </Fragment>\n  );\n};\nexport default CSVMultiSelector;\n"],"names":["_ref","closeVersioningModalAndRefresh","modalOpen","selectedBucket","versioningInfo","objectLockingEnabled","dispatch","useAppDispatch","versioningLoading","setVersioningLoading","useState","versionState","setVersionState","status","excludeFolders","setExcludeFolders","excludedPrefixes","setExcludedPrefixes","bucketVersioning","map","item","prefix","join","parseExcludedPrefixes","_jsx","ModalBox","onClose","open","title","children","_jsxs","FormLayout","withBorders","containerPadding","Switch","id","label","checked","onChange","e","target","indicatorLabels","Fragment","CSVMultiSelector","elements","name","value","valCh","Array","isArray","withBorder","Box","sx","modalStyleUtils","modalButtonBar","Button","type","variant","color","onClick","resetForm","enableVersioning","api","buckets","setBucketVersioning","enabled","excludePrefixes","split","filter","trim","then","catch","err","setErrorSnackMessage","errorToHandler","error","tooltip","commonPlaceholder","currentElements","setCurrentElements","bottomList","createRef","useEffect","length","elementsSplit","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","element","onChangeElement","persist","updatedElement","index","get","parseInt","inputs","InputBox","toString","placeholder","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","display","className","InputLabel","alignItems","marginLeft","width","Tooltip","placement","HelpIcon","overflowY","height","position","ref"],"sourceRoot":""}