{"version":3,"file":"static/js/8017.9cff1006.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/ConfirmDeleteDestinationModal.tsx","screens/Console/EventDestinations/ListEventDestinations.tsx","screens/Console/EventDestinations/utils.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"mds\";\n\nconst ConfirmDeleteDestinationModal = ({\n  onConfirm,\n  onClose,\n  serviceName,\n  status,\n}: {\n  onConfirm: () => void;\n  onClose: () => void;\n  serviceName: string;\n  status: string;\n}) => {\n  return (\n    <ConfirmDialog\n      title={`Delete Endpoint`}\n      confirmText={\"Delete\"}\n      isOpen={true}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={false}\n      onConfirm={onConfirm}\n      onClose={onClose}\n      confirmationContent={\n        <React.Fragment>\n          Are you sure you want to delete the event destination ?\n          <br />\n          <b>{serviceName}</b> which is <b>{status}</b>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default ConfirmDeleteDestinationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  ActionLink,\n  AddIcon,\n  Box,\n  Button,\n  CircleIcon,\n  DataTable,\n  Grid,\n  HelpBox,\n  LambdaIcon,\n  PageLayout,\n  ProgressBar,\n  RefreshIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"api\";\nimport { NotificationEndpointItem } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport styled from \"styled-components\";\nimport get from \"lodash/get\";\nimport { TransformedEndpointItem } from \"./types\";\nimport { getNotificationConfigKey, notificationTransform } from \"./utils\";\nimport { actionsTray } from \"../Common/FormComponents/common/styleLibrary\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setDestinationLoading } from \"./destinationsSlice\";\nimport SearchBox from \"../Common/SearchBox\";\nimport ConfirmDeleteDestinationModal from \"./ConfirmDeleteDestinationModal\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\n\nconst StatusDisplay = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  \"& svg\": {\n    width: 16,\n    marginRight: 5,\n    fill: get(theme, \"signalColors.good\", \"#4CCB92\"),\n  },\n  \"& svg.offline\": {\n    fill: get(theme, \"signalColors.danger\", \"#C51B3F\"),\n  },\n}));\n\nconst ListEventDestinations = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  // Reducer States\n  const isLoading = useSelector((state: AppState) => state.destination.loading);\n\n  //Local States\n  const [records, setRecords] = useState<TransformedEndpointItem[]>([]);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const [isDelConfirmOpen, setIsDelConfirmOpen] = useState<boolean>(false);\n  const [selNotifyEndPoint, setSelNotifyEndpoint] =\n    useState<TransformedEndpointItem | null>();\n\n  //Effects\n  // load records on mount\n  useEffect(() => {\n    if (isLoading) {\n      const fetchRecords = () => {\n        api.admin\n          .notificationEndpointList()\n          .then((res) => {\n            let resNotEndList: NotificationEndpointItem[] = [];\n            if (res.data.notification_endpoints) {\n              resNotEndList = res.data.notification_endpoints;\n            }\n            setRecords(notificationTransform(resNotEndList));\n            dispatch(setDestinationLoading(false));\n          })\n          .catch((err) => {\n            dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n            dispatch(setDestinationLoading(false));\n          });\n      };\n      fetchRecords();\n    }\n  }, [isLoading, dispatch]);\n\n  useEffect(() => {\n    dispatch(setDestinationLoading(true));\n  }, [dispatch]);\n\n  const resetNotificationConfig = (\n    ep: TransformedEndpointItem | undefined | null,\n  ) => {\n    if (ep?.name) {\n      const configKey = getNotificationConfigKey(ep.name);\n      let accountId = `:${ep.account_id}`;\n      if (configKey) {\n        api.configs\n          .resetConfig(`${configKey}${accountId}`)\n          .then(() => {\n            dispatch(setServerNeedsRestart(true));\n            setSelNotifyEndpoint(null);\n            setIsDelConfirmOpen(false);\n            dispatch(setDestinationLoading(true));\n          })\n          .catch((err) => {\n            setIsDelConfirmOpen(false);\n            dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n          });\n      } else {\n        setSelNotifyEndpoint(null);\n        setIsDelConfirmOpen(false);\n        console.log(`Unable to find Config key for ${ep.name}`);\n      }\n    }\n  };\n\n  const confirmDelNotifyEndpoint = (record: TransformedEndpointItem) => {\n    setSelNotifyEndpoint(record);\n    setIsDelConfirmOpen(true);\n  };\n\n  const tableActions = [{ type: \"delete\", onClick: confirmDelNotifyEndpoint }];\n\n  const filteredRecords = records.filter((b: TransformedEndpointItem) => {\n    if (filter === \"\") {\n      return true;\n    }\n    return b.service_name.indexOf(filter) >= 0;\n  });\n\n  const statusDisplay = (status: string) => {\n    return (\n      <StatusDisplay>\n        <CircleIcon className={status === \"Offline\" ? \"offline\" : \"\"} />\n        {status}\n      </StatusDisplay>\n    );\n  };\n\n  return (\n    <Fragment>\n      <PageLayout>\n        <Grid item xs={12} sx={actionsTray.actionsTray}>\n          <SearchBox\n            placeholder=\"Search target\"\n            onChange={setFilter}\n            value={filter}\n            sx={{ maxWidth: 380 }}\n          />\n          <Box\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n              gap: 5,\n            }}\n          >\n            <TooltipWrapper tooltip={\"Refresh List\"}>\n              <Button\n                id={\"reload-event-destinations\"}\n                label={\"Refresh\"}\n                variant=\"regular\"\n                icon={<RefreshIcon />}\n                onClick={() => {\n                  dispatch(setDestinationLoading(true));\n                }}\n              />\n            </TooltipWrapper>\n            <TooltipWrapper tooltip={\"Add Event Destination\"}>\n              <Button\n                id={\"add-notification-target\"}\n                label={\"Add Event Destination\"}\n                variant=\"callAction\"\n                icon={<AddIcon />}\n                onClick={() => {\n                  navigate(IAM_PAGES.EVENT_DESTINATIONS_ADD);\n                }}\n              />\n            </TooltipWrapper>\n          </Box>\n        </Grid>\n        {isLoading && <ProgressBar />}\n        {!isLoading && (\n          <Fragment>\n            {records.length > 0 && (\n              <Fragment>\n                <Box sx={{ width: \"100%\" }}>\n                  <DataTable\n                    itemActions={tableActions}\n                    columns={[\n                      {\n                        label: \"Status\",\n                        elementKey: \"status\",\n                        renderFunction: statusDisplay,\n                        width: 150,\n                      },\n                      { label: \"Service\", elementKey: \"service_name\" },\n                    ]}\n                    isLoading={isLoading}\n                    records={filteredRecords}\n                    entityName=\"Event Destinations\"\n                    idField=\"service_name\"\n                    customPaperHeight={\"400px\"}\n                  />\n                </Box>\n                <Grid item xs={12} sx={{ marginTop: 15 }}>\n                  <HelpBox\n                    title={\"Event Destinations\"}\n                    iconComponent={<LambdaIcon />}\n                    help={\n                      <Fragment>\n                        MinIO bucket notifications allow administrators to send\n                        notifications to supported external services on certain\n                        object or bucket events. MinIO supports bucket and\n                        object-level S3 events similar to the Amazon S3 Event\n                        Notifications.\n                        <br />\n                        <br />\n                        You can learn more at our{\" \"}\n                        <a\n                          href=\"https://min.io/docs/minio/linux/administration/monitoring/bucket-notifications.html?ref=con\"\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          documentation\n                        </a>\n                        .\n                      </Fragment>\n                    }\n                  />\n                </Grid>\n              </Fragment>\n            )}\n            {records.length === 0 && (\n              <Grid\n                container\n                sx={{\n                  justifyContent: \"center\",\n                  alignContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Grid item xs={8}>\n                  <HelpBox\n                    title={\"Event Destinations\"}\n                    iconComponent={<LambdaIcon />}\n                    help={\n                      <Fragment>\n                        MinIO bucket notifications allow administrators to send\n                        notifications to supported external services on certain\n                        object or bucket events. MinIO supports bucket and\n                        object-level S3 events similar to the Amazon S3 Event\n                        Notifications.\n                        <br />\n                        <br />\n                        To get started,{\" \"}\n                        <ActionLink\n                          onClick={() => {\n                            navigate(IAM_PAGES.EVENT_DESTINATIONS_ADD);\n                          }}\n                        >\n                          Add an Event Destination\n                        </ActionLink>\n                        .\n                      </Fragment>\n                    }\n                  />\n                </Grid>\n              </Grid>\n            )}\n          </Fragment>\n        )}\n\n        {isDelConfirmOpen ? (\n          <ConfirmDeleteDestinationModal\n            onConfirm={() => {\n              resetNotificationConfig(selNotifyEndPoint);\n            }}\n            status={`${selNotifyEndPoint?.status}`}\n            serviceName={`${selNotifyEndPoint?.service_name}`}\n            onClose={() => {\n              setIsDelConfirmOpen(false);\n            }}\n          />\n        ) : null}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default ListEventDestinations;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { NotificationEndpointItem } from \"api/consoleApi\";\nimport { IElementValue } from \"../Configurations/types\";\nimport { TransformedEndpointItem } from \"./types\";\n\nexport const notifyPostgres = \"notify_postgres\";\nexport const notifyMysql = \"notify_mysql\";\nconst notifyKafka = \"notify_kafka\";\nconst notifyAmqp = \"notify_amqp\";\nconst notifyMqtt = \"notify_mqtt\";\nconst notifyRedis = \"notify_redis\";\nconst notifyNats = \"notify_nats\";\nconst notifyElasticsearch = \"notify_elasticsearch\";\nconst notifyWebhooks = \"notify_webhook\";\nconst notifyNsq = \"notify_nsq\";\nexport const notificationTransform = (\n  notificationElements: NotificationEndpointItem[],\n) => {\n  return notificationElements.map((element) => {\n    return {\n      service_name: `${element.service}:${element.account_id}`,\n      name: element.service,\n      account_id: element.account_id,\n      status: element.status,\n    };\n  }) as TransformedEndpointItem[];\n};\n\nexport class DestType {\n  static DB: string = \"database\";\n  static Queue: string = \"queue\";\n  static Func: string = \"functions\";\n}\n\nconst getImgBaseURL = () => {\n  return `${document.baseURI}`;\n};\n\nexport const destinationList = [\n  {\n    actionTrigger: notifyPostgres,\n    targetTitle: \"PostgreSQL\",\n    logo: `${getImgBaseURL()}postgres-logo.svg`,\n    category: DestType.DB,\n  },\n  {\n    actionTrigger: notifyKafka,\n    targetTitle: \"Kafka\",\n    logo: `${getImgBaseURL()}kafka-logo.svg`,\n    category: DestType.Queue,\n  },\n  {\n    actionTrigger: notifyAmqp,\n    targetTitle: \"AMQP\",\n    logo: `${getImgBaseURL()}amqp-logo.svg`,\n    category: DestType.Queue,\n  },\n  {\n    actionTrigger: notifyMqtt,\n    targetTitle: \"MQTT\",\n    logo: `${getImgBaseURL()}mqtt-logo.svg`,\n    category: DestType.Queue,\n  },\n  {\n    actionTrigger: notifyRedis,\n    targetTitle: \"Redis\",\n    logo: `${getImgBaseURL()}redis-logo.svg`,\n    category: DestType.Queue,\n  },\n  {\n    actionTrigger: notifyNats,\n    targetTitle: \"NATS\",\n    logo: `${getImgBaseURL()}nats-logo.svg`,\n    category: DestType.Queue,\n  },\n  {\n    actionTrigger: notifyMysql,\n    targetTitle: \"Mysql\",\n    logo: `${getImgBaseURL()}mysql-logo.svg`,\n    category: DestType.DB,\n  },\n  {\n    actionTrigger: notifyElasticsearch,\n    targetTitle: \"Elastic Search\",\n    logo: `${getImgBaseURL()}elasticsearch-logo.svg`,\n    category: DestType.DB,\n  },\n  {\n    actionTrigger: notifyWebhooks,\n    targetTitle: \"Webhook\",\n    logo: `${getImgBaseURL()}webhooks-logo.svg`,\n    category: DestType.Func,\n  },\n  {\n    actionTrigger: notifyNsq,\n    targetTitle: \"NSQ\",\n    logo: `${getImgBaseURL()}nsq-logo.svg`,\n    category: DestType.Queue,\n  },\n];\n\nconst commonFields = [\n  {\n    name: \"queue_dir\",\n    label: \"Queue Directory\",\n    required: false,\n\n    tooltip: \"Staging directory for undelivered messages e.g. '/home/events'\",\n    type: \"string\",\n    placeholder: \"Enter Queue Directory\",\n  },\n  {\n    name: \"queue_limit\",\n    label: \"Queue Limit\",\n    required: false,\n\n    tooltip: \"Maximum limit for undelivered messages, defaults to '10000'\",\n    type: \"number\",\n    placeholder: \"Enter Queue Limit\",\n  },\n  {\n    name: \"comment\",\n    label: \"Comment\",\n    required: false,\n    type: \"comment\",\n    placeholder: \"Enter custom notes if any\",\n  },\n];\n\nexport const removeEmptyFields = (formFields: IElementValue[]) => {\n  const nonEmptyFields = formFields.filter((field) => field.value !== \"\");\n\n  return nonEmptyFields;\n};\n\nexport const notificationEndpointsFields: any = {\n  [notifyKafka]: [\n    {\n      name: \"brokers\",\n      label: \"Brokers\",\n      required: true,\n\n      tooltip: \"Comma separated list of Kafka broker addresses\",\n      type: \"string\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      label: \"Topic\",\n      tooltip: \"Kafka topic used for bucket notifications\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"sasl_username\",\n      label: \"SASL Username\",\n      tooltip: \"Username for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Username\",\n    },\n    {\n      name: \"sasl_password\",\n      label: \"SASL Password\",\n      tooltip: \"Password for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Password\",\n    },\n    {\n      name: \"sasl_mechanism\",\n      label: \"SASL Mechanism\",\n      tooltip: \"SASL authentication mechanism, default 'PLAIN'\",\n      type: \"string\",\n    },\n    {\n      name: \"tls_client_auth\",\n      label: \"TLS Client Auth\",\n      tooltip:\n        \"Client Auth determines the Kafka server's policy for TLS client authorization\",\n      type: \"string\",\n      placeholder: \"Enter TLS Client Auth\",\n    },\n    {\n      name: \"sasl\",\n      label: \"SASL\",\n      tooltip: \"Set to 'on' to enable SASL authentication\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS skip verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"client_tls_cert\",\n      label: \"client TLS cert\",\n      tooltip: \"Path to client certificate for mTLS authorization\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Cert\",\n    },\n    {\n      name: \"client_tls_key\",\n      label: \"client TLS key\",\n      tooltip: \"Path to client key for mTLS authorization\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Key\",\n    },\n    {\n      name: \"version\",\n      label: \"Version\",\n      tooltip: \"Specify the version of the Kafka cluster e.g '2.2.0'\",\n      type: \"string\",\n      placeholder: \"Enter Kafka Version\",\n    },\n    ...commonFields,\n  ],\n  [notifyAmqp]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"AMQP server endpoint e.g. `amqp://myuser:mypassword@localhost:5672`\",\n      type: \"url\",\n    },\n    {\n      name: \"exchange\",\n      label: \"Exchange\",\n      tooltip: \"Name of the AMQP exchange\",\n      type: \"string\",\n      placeholder: \"Enter Exchange\",\n    },\n    {\n      name: \"exchange_type\",\n      label: \"Exchange Type\",\n      tooltip: \"AMQP exchange type\",\n      type: \"string\",\n      placeholder: \"Enter Exchange Type\",\n    },\n    {\n      name: \"routing_key\",\n      label: \"Routing Key\",\n      tooltip: \"Routing key for publishing\",\n      type: \"string\",\n      placeholder: \"Enter Routing Key\",\n    },\n    {\n      name: \"mandatory\",\n      label: \"Mandatory\",\n      tooltip:\n        \"Quietly ignore undelivered messages when set to 'off', default is 'on'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"durable\",\n      label: \"Durable\",\n      tooltip:\n        \"Persist queue across broker restarts when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"no_wait\",\n      label: \"No Wait\",\n      tooltip:\n        \"Non-blocking message delivery when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"internal\",\n      label: \"Internal\",\n      tooltip:\n        \"Set to 'on' for exchange to be not used directly by publishers, but only when bound to other exchanges\",\n      type: \"on|off\",\n    },\n    {\n      name: \"auto_deleted\",\n      label: \"Auto Deleted\",\n      tooltip:\n        \"Auto delete queue when set to 'on', when there are no consumers\",\n      type: \"on|off\",\n    },\n    {\n      name: \"delivery_mode\",\n      label: \"Delivery Mode\",\n      tooltip: \"Set to '1' for non-persistent or '2' for persistent queue\",\n      type: \"number\",\n      placeholder: \"Enter Delivery Mode\",\n    },\n    ...commonFields,\n  ],\n  [notifyRedis]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"Redis server's address e.g. `localhost:6379`\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"key\",\n      required: true,\n      label: \"Key\",\n      tooltip: \"Redis key to store/update events, key is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Key\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"Redis server password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    ...commonFields,\n  ],\n  [notifyMqtt]: [\n    {\n      name: \"broker\",\n      required: true,\n      label: \"Broker\",\n      tooltip: \"MQTT server endpoint e.g. `tcp://localhost:1883`\",\n      type: \"uri\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"Name of the MQTT topic to publish\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"MQTT username\",\n      type: \"string\",\n      placeholder: \"Enter Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"MQTT password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    {\n      name: \"qos\",\n      label: \"QOS\",\n      tooltip: \"Set the quality of service priority, defaults to '0'\",\n      type: \"number\",\n      placeholder: \"Enter QOS\",\n    },\n    {\n      name: \"keep_alive_interval\",\n      label: \"Keep Alive Interval\",\n      tooltip: \"Keep-alive interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Keep Alive Interval\",\n    },\n    {\n      name: \"reconnect_interval\",\n      label: \"Reconnect Interval\",\n      tooltip: \"Reconnect interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Reconnect Interval\",\n    },\n    ...commonFields,\n  ],\n  [notifyNats]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"NATS server address e.g. '0.0.0.0:4222'\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"subject\",\n      required: true,\n      label: \"Subject\",\n      tooltip: \"NATS subscription subject\",\n      type: \"string\",\n      placeholder: \"Enter NATS Subject\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"NATS username\",\n      type: \"string\",\n      placeholder: \"Enter NATS Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"NATS password\",\n      type: \"string\",\n      placeholder: \"Enter NATS password\",\n    },\n    {\n      name: \"token\",\n      label: \"Token\",\n      tooltip: \"NATS token\",\n      type: \"string\",\n      placeholder: \"Enter NATS token\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"ping_interval\",\n      label: \"Ping Interval\",\n      tooltip: \"Client ping commands interval in s,m,h,d. Disabled by default\",\n      type: \"duration\",\n      placeholder: \"Enter Ping Interval\",\n    },\n    {\n      name: \"streaming\",\n      label: \"Streaming\",\n      tooltip: \"Set to 'on' to use streaming NATS server\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_async\",\n      label: \"Streaming async\",\n      tooltip: \"Set to 'on' to enable asynchronous publish\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_max_pub_acks_in_flight\",\n      label: \"Streaming max publish ACKS in flight\",\n      tooltip: \"Number of messages to publish without waiting for ACKs\",\n      type: \"number\",\n      placeholder: \"Enter Streaming in flight value\",\n    },\n    {\n      name: \"streaming_cluster_id\",\n      label: \"Streaming Cluster ID\",\n      tooltip: \"Unique ID for NATS streaming cluster\",\n      type: \"string\",\n      placeholder: \"Enter Streaming Cluster ID\",\n    },\n    {\n      name: \"cert_authority\",\n      label: \"Cert Authority\",\n      tooltip: \"Path to certificate chain of the target NATS server\",\n      type: \"string\",\n      placeholder: \"Enter Cert Authority\",\n    },\n    {\n      name: \"client_cert\",\n      label: \"Client Cert\",\n      tooltip: \"Client cert for NATS mTLS auth\",\n      type: \"string\",\n      placeholder: \"Enter Client Cert\",\n    },\n    {\n      name: \"client_key\",\n      label: \"Client Key\",\n      tooltip: \"Client cert key for NATS mTLS authorization\",\n      type: \"string\",\n      placeholder: \"Enter Client Key\",\n    },\n    ...commonFields,\n  ],\n  [notifyElasticsearch]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"Elasticsearch server's address, with optional authentication info\",\n      type: \"url\",\n      placeholder: \"Enter URL\",\n    },\n    {\n      name: \"index\",\n      required: true,\n      label: \"Index\",\n      tooltip:\n        \"Elasticsearch index to store/update events, index is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Index\",\n    },\n    {\n      name: \"format\",\n      required: true,\n      label: \"Format\",\n      tooltip:\n        \"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\",\n      type: \"enum\",\n      placeholder: \"Enter Format\",\n    },\n    ...commonFields,\n  ],\n  [notifyWebhooks]: [\n    {\n      name: \"endpoint\",\n      required: true,\n      label: \"Endpoint\",\n      tooltip:\n        \"Webhook server endpoint e.g. http://localhost:8080/minio/events\",\n      type: \"url\",\n      placeholder: \"Enter Endpoint\",\n    },\n    {\n      name: \"auth_token\",\n      label: \"Auth Token\",\n      tooltip: \"Opaque string or JWT authorization token\",\n      type: \"string\",\n      placeholder: \"Enter auth_token\",\n    },\n    ...commonFields,\n  ],\n  [notifyNsq]: [\n    {\n      name: \"nsqd_address\",\n      required: true,\n      label: \"NSQD Address\",\n      tooltip: \"NSQ server address e.g. '127.0.0.1:4150'\",\n      type: \"address\",\n      placeholder: \"Enter nsqd_address\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"NSQ topic\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    ...commonFields,\n  ],\n};\n\nconst serviceToConfigMap: Record<string, string> = {\n  webhook: \"notify_webhook\",\n  amqp: \"notify_amqp\",\n  kafka: \"notify_kafka\",\n  mqtt: \"notify_mqtt\",\n  nats: \"notify_nats\",\n  nsq: \"notify_nsq\",\n  mysql: \"notify_mysql\",\n  postgresql: \"notify_postgres\", //looks different in server response(postgresql as opposed to postgres) from api/admin_notification_endpoints.go\n  elasticsearch: \"notify_elasticsearch\",\n  redis: \"notify_redis\",\n};\n\nexport const getNotificationConfigKey = (serviceName: string) => {\n  return serviceToConfigMap[serviceName];\n};\n"],"names":["_ref","onConfirm","onClose","serviceName","status","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmModalIcon","isLoading","confirmationContent","_jsxs","React","children","StatusDisplay","styled","div","theme","display","alignItems","width","marginRight","fill","get","ListEventDestinations","dispatch","useAppDispatch","navigate","useNavigate","useSelector","state","destination","loading","records","setRecords","useState","filter","setFilter","isDelConfirmOpen","setIsDelConfirmOpen","selNotifyEndPoint","setSelNotifyEndpoint","useEffect","fetchRecords","api","admin","notificationEndpointList","then","res","resNotEndList","data","notification_endpoints","notificationTransform","setDestinationLoading","catch","err","setErrorSnackMessage","errorToHandler","error","tableActions","type","onClick","record","filteredRecords","b","service_name","indexOf","Fragment","PageLayout","Grid","item","xs","sx","actionsTray","SearchBox","placeholder","onChange","value","maxWidth","Box","justifyContent","gap","TooltipWrapper","tooltip","Button","id","label","variant","icon","RefreshIcon","AddIcon","IAM_PAGES","EVENT_DESTINATIONS_ADD","ProgressBar","length","DataTable","itemActions","columns","elementKey","renderFunction","CircleIcon","className","entityName","idField","customPaperHeight","marginTop","HelpBox","iconComponent","LambdaIcon","help","href","target","rel","container","alignContent","ActionLink","ConfirmDeleteDestinationModal","ep","name","configKey","getNotificationConfigKey","accountId","account_id","configs","resetConfig","setServerNeedsRestart","console","log","resetNotificationConfig","notifyPostgres","notifyMysql","notifyKafka","notifyAmqp","notifyMqtt","notifyRedis","notifyNats","notifyElasticsearch","notifyWebhooks","notifyNsq","notificationElements","map","element","service","DestType","DB","Queue","Func","getImgBaseURL","document","baseURI","destinationList","actionTrigger","targetTitle","logo","category","commonFields","required","removeEmptyFields","formFields","field","notificationEndpointsFields","serviceToConfigMap","webhook","amqp","kafka","mqtt","nats","nsq","mysql","postgresql","elasticsearch","redis"],"sourceRoot":""}