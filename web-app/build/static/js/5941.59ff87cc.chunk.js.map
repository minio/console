{"version":3,"file":"static/js/5941.59ff87cc.chunk.js","mappings":"8PAsCA,MAuKA,EAvKqBA,IAOM,IAPL,2BACpBC,EAA0B,WAC1BC,EAAU,eACVC,EAAc,gBACdC,EAAe,WAEfC,GACmBL,EACnB,MAAMM,GAAWC,EAAAA,EAAAA,MACXC,EAAeA,IAAMP,GAA2B,IAK/CQ,EAAeC,IAAmBC,EAAAA,EAAAA,GAAOH,GAJ5BI,GAClBN,GAASO,EAAAA,EAAAA,IAAqBD,OAKzBE,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAkB,IACvDC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAkB,GAE5DG,GAAkBC,EAAAA,EAAAA,KACrBC,GAAoBA,EAAMC,cAAcH,kBAGrCI,GACJC,EAAAA,EAAAA,GACE,CAACrB,GACD,CAACsB,EAAAA,GAAWC,kCACiB,gBAAX,OAAfP,QAAe,IAAfA,OAAe,EAAfA,EAAiBQ,MAExB,IAAKvB,EACH,OAAO,KAET,MAqDMwB,EACmB,aAAb,OAAVvB,QAAU,IAAVA,OAAU,EAAVA,EAAYwB,SAA+C,eAAb,OAAVxB,QAAU,IAAVA,OAAU,EAAVA,EAAYwB,QAElD,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,MAAO,iBACPC,YAAa,SACbC,OAAQhC,EACRiC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,IAAiB,IAC7BC,UAAW5B,EACX6B,UA/DoBC,KACtB,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIrC,EAAgBsC,OAAQD,IACtCrC,EAAgBqC,GAAGE,SAAS,KAC9BH,EAAOI,KAAK,CACVC,KAAMzC,EAAgBqC,GACtBK,UAAW,GACXC,WAAW,IAGbP,EAAOI,KAAK,CACVC,KAAMzC,EAAgBqC,GACtBK,UAAW,GACXC,WAAW,IAKjB,GAAIP,EACF,GAA+B,IAA3BpC,EAAgBsC,OAAc,CAChC,MAAMM,EAAc5C,EAAgB,GACpC6C,EAAAA,EAAIC,QACDC,aAAahD,EAAgB,CAC5BiD,OAAQJ,EACRK,aAAcvC,EACdwC,OAAQrC,EACR8B,UAAWC,EAAYL,SAAS,OAEjCY,KAAK/C,GACLgD,OAAO5C,IACNN,GACEO,EAAAA,EAAAA,IAAqB,CACnB4C,aAAc,4BAA4B7C,EAAI8C,eAC5CvC,EACI,+DACA,KAENwC,cAAe,KAElB,GAEP,MACEjD,EACE,OACA,mBAAmBP,iCAA8CW,IAC/DG,EAAmB,eAAiB,KAEtCuB,EAGN,EAcEoB,QApFYA,IAAM3D,GAA2B,GAqF7C4D,qBACEC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,CAAC,gDACsC5D,EAAgBsC,OAAQ,IAAI,WACjE,IACRd,IACCkC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPlC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACmC,EAAAA,IAAM,CACLC,MAAO,sBACPC,gBAAiB,CAAC,MAAO,MACzBC,QAAStD,EACTuD,MAAO,kBACPC,GAAG,kBACHC,KAAK,kBACLC,SAAWC,IACT1D,GAAmBD,EAAe,EAEpC4D,YAAY,KAEbnD,GAAaT,IACZgB,EAAAA,EAAAA,KAACiC,EAAAA,SAAQ,CAAAC,UACPlC,EAAAA,EAAAA,KAAA,OACE6C,MAAO,CACLC,UAAW,IACXZ,UAEFlC,EAAAA,EAAAA,KAACmC,EAAAA,IAAM,CACLC,MAAO,yBACPC,gBAAiB,CAAC,MAAO,MACzBC,QAASnD,EACToD,MAAO,oBACPC,GAAG,oBACHC,KAAK,oBACLC,SAAWC,IACTvD,GAAqBD,EAAiB,EAExCyD,YAAY,SAKnB5D,IACCgD,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPF,EAAAA,EAAAA,MAAA,OACEa,MAAO,CACLC,UAAW,GACXC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,gBAAiB,YACjBC,MAAO,WACPjB,SAAA,CACH,mEAEWlC,EAAAA,EAAAA,KAAA,SAAM,mCAGlBA,EAAAA,EAAAA,KAAA,SAAM,+CAQlB,C","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/DeleteMultipleObjects.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport useApi from \"../../../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon, Switch } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { hasPermission } from \"../../../../../../common/SecureComponent\";\nimport { IAM_SCOPES } from \"../../../../../../common/SecureComponent/permissions\";\nimport { useSelector } from \"react-redux\";\nimport { BucketVersioningResponse } from \"api/consoleApi\";\nimport { api } from \"../../../../../../api\";\n\ninterface IDeleteObjectProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedObjects: string[];\n  selectedBucket: string;\n\n  versioning: BucketVersioningResponse;\n}\n\nconst DeleteObject = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  selectedObjects,\n\n  versioning,\n}: IDeleteObjectProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const [deleteVersions, setDeleteVersions] = useState<boolean>(false);\n  const [bypassGovernance, setBypassGovernance] = useState<boolean>(false);\n\n  const retentionConfig = useSelector(\n    (state: AppState) => state.objectBrowser.retentionConfig,\n  );\n\n  const canBypass =\n    hasPermission(\n      [selectedBucket],\n      [IAM_SCOPES.S3_BYPASS_GOVERNANCE_RETENTION],\n    ) && retentionConfig?.mode === \"governance\";\n\n  if (!selectedObjects) {\n    return null;\n  }\n  const onConfirmDelete = () => {\n    let toSend = [];\n    for (let i = 0; i < selectedObjects.length; i++) {\n      if (selectedObjects[i].endsWith(\"/\")) {\n        toSend.push({\n          path: selectedObjects[i],\n          versionID: \"\",\n          recursive: true,\n        });\n      } else {\n        toSend.push({\n          path: selectedObjects[i],\n          versionID: \"\",\n          recursive: false,\n        });\n      }\n    }\n\n    if (toSend) {\n      if (selectedObjects.length === 1) {\n        const firstObject = selectedObjects[0];\n        api.buckets\n          .deleteObject(selectedBucket, {\n            prefix: firstObject,\n            all_versions: deleteVersions,\n            bypass: bypassGovernance,\n            recursive: firstObject.endsWith(\"/\"), //if it is just a prefix\n          })\n          .then(onDelSuccess)\n          .catch((err) => {\n            dispatch(\n              setErrorSnackMessage({\n                errorMessage: `Could not delete object. ${err.statusText}. ${\n                  retentionConfig\n                    ? \"Please check retention mode and if object is WORM protected.\"\n                    : \"\"\n                }`,\n                detailedError: \"\",\n              }),\n            );\n          });\n      } else {\n        invokeDeleteApi(\n          \"POST\",\n          `/api/v1/buckets/${selectedBucket}/delete-objects?all_versions=${deleteVersions}${\n            bypassGovernance ? \"&bypass=true\" : \"\"\n          }`,\n          toSend,\n        );\n      }\n    }\n  };\n\n  const isVersionedDelete =\n    versioning?.status === \"Enabled\" || versioning?.status === \"Suspended\";\n\n  return (\n    <ConfirmDialog\n      title={`Delete Objects`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the selected {selectedObjects.length}{\" \"}\n          objects?{\" \"}\n          {isVersionedDelete && (\n            <Fragment>\n              <br />\n              <br />\n              <Switch\n                label={\"Delete All Versions\"}\n                indicatorLabels={[\"Yes\", \"No\"]}\n                checked={deleteVersions}\n                value={\"delete_versions\"}\n                id=\"delete-versions\"\n                name=\"delete-versions\"\n                onChange={(e) => {\n                  setDeleteVersions(!deleteVersions);\n                }}\n                description=\"\"\n              />\n              {canBypass && deleteVersions && (\n                <Fragment>\n                  <div\n                    style={{\n                      marginTop: 10,\n                    }}\n                  >\n                    <Switch\n                      label={\"Bypass Governance Mode\"}\n                      indicatorLabels={[\"Yes\", \"No\"]}\n                      checked={bypassGovernance}\n                      value={\"bypass_governance\"}\n                      id=\"bypass_governance\"\n                      name=\"bypass_governance\"\n                      onChange={(e) => {\n                        setBypassGovernance(!bypassGovernance);\n                      }}\n                      description=\"\"\n                    />\n                  </div>\n                </Fragment>\n              )}\n              {deleteVersions && (\n                <Fragment>\n                  <div\n                    style={{\n                      marginTop: 10,\n                      border: \"#c83b51 1px solid\",\n                      borderRadius: 3,\n                      padding: 5,\n                      backgroundColor: \"#c83b5120\",\n                      color: \"#c83b51\",\n                    }}\n                  >\n                    This will remove the objects as well as all of their\n                    versions, <br />\n                    This action is irreversible.\n                  </div>\n                  <br />\n                  Are you sure you want to continue?\n                </Fragment>\n              )}\n            </Fragment>\n          )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteObject;\n"],"names":["_ref","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","selectedObjects","versioning","dispatch","useAppDispatch","onDelSuccess","deleteLoading","invokeDeleteApi","useApi","err","setErrorSnackMessage","deleteVersions","setDeleteVersions","useState","bypassGovernance","setBypassGovernance","retentionConfig","useSelector","state","objectBrowser","canBypass","hasPermission","IAM_SCOPES","S3_BYPASS_GOVERNANCE_RETENTION","mode","isVersionedDelete","status","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","toSend","i","length","endsWith","push","path","versionID","recursive","firstObject","api","buckets","deleteObject","prefix","all_versions","bypass","then","catch","errorMessage","statusText","detailedError","onClose","confirmationContent","_jsxs","Fragment","children","Switch","label","indicatorLabels","checked","value","id","name","onChange","e","description","style","marginTop","border","borderRadius","padding","backgroundColor","color"],"sourceRoot":""}