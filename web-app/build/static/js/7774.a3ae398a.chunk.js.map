{"version":3,"file":"static/js/7774.a3ae398a.chunk.js","mappings":"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","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  Button,\n  CreateNewPathIcon,\n  InputBox,\n  Grid,\n  FormLayout,\n  Box,\n} from \"mds\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { modalStyleUtils } from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { BucketObjectItem } from \"./types\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\n\ninterface ICreatePath {\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  onClose: () => any;\n  simplePath: string | null;\n  limitedSubPath?: boolean;\n}\n\nconst CreatePathModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  simplePath,\n  limitedSubPath,\n}: ICreatePath) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [currentPath, setCurrentPath] = useState(bucketName);\n\n  const records = useSelector((state: AppState) => state.objectBrowser.records);\n\n  useEffect(() => {\n    if (simplePath) {\n      const newPath = `${bucketName}${\n        !bucketName.endsWith(\"/\") && !simplePath.startsWith(\"/\") ? \"/\" : \"\"\n      }${simplePath}`;\n\n      setCurrentPath(newPath);\n    }\n  }, [simplePath, bucketName]);\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"/\";\n\n    if (simplePath) {\n      folderPath = simplePath.endsWith(\"/\") ? simplePath : `${simplePath}/`;\n    }\n\n    const sharesName = (record: BucketObjectItem) =>\n      record.name === folderPath + pathUrl;\n\n    if (records.findIndex(sharesName) !== -1) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Folder cannot have the same name as an existing file\",\n          detailedError: \"\",\n        }),\n      );\n      return;\n    }\n\n    const cleanPathURL = pathUrl\n      .split(\"/\")\n      .filter((splitItem) => splitItem.trim() !== \"\")\n      .join(\"/\");\n\n    if (folderPath.slice(0, 1) === \"/\") {\n      folderPath = folderPath.slice(1); //trim '/'\n    }\n\n    const newPath = `/browser/${encodeURIComponent(bucketName)}/${encodeURIComponent(\n      `${folderPath}${cleanPathURL}/`,\n    )}`;\n\n    navigate(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          <Box className={\"inputItem\"} sx={{ display: \"flex\", gap: 8 }}>\n            <strong>Current Path:</strong> <br />\n            <Box\n              sx={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                fontSize: 14,\n                textAlign: \"left\",\n              }}\n              dir={\"rtl\"}\n            >\n              {currentPath}\n            </Box>\n          </Box>\n          <InputBox\n            value={pathUrl}\n            label={\"New Folder Path\"}\n            id={\"folderPath\"}\n            name={\"folderPath\"}\n            placeholder={\"Enter the new Folder Path\"}\n            onChange={inputChange}\n            onKeyPress={keyPressed}\n            required\n            tooltip={\n              (limitedSubPath &&\n                \"You may only have write access on a limited set of subpaths within this path. Please carefully review your User permissions to understand the paths to which you may write.\") ||\n              \"\"\n            }\n          />\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"clear\"}\n              type=\"button\"\n              color=\"primary\"\n              variant=\"regular\"\n              onClick={resetForm}\n              label={\"Clear\"}\n            />\n            <Button\n              id={\"create\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n              label={\"Create\"}\n            />\n          </Grid>\n        </FormLayout>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\n  simplePath: objectBrowser.simplePath,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(CreatePathModal);\n"],"names":["connect","_ref2","objectBrowser","simplePath","_ref","modalOpen","folderName","bucketName","onClose","limitedSubPath","dispatch","useAppDispatch","navigate","useNavigate","pathUrl","setPathUrl","useState","isFormValid","setIsFormValid","currentPath","setCurrentPath","records","useSelector","state","useEffect","newPath","endsWith","startsWith","createProcess","folderPath","findIndex","record","name","setModalErrorSnackMessage","errorMessage","detailedError","cleanPathURL","split","filter","splitItem","trim","join","slice","encodeURIComponent","valid","length","_jsx","React","children","ModalWrapper","title","titleIcon","CreateNewPathIcon","_jsxs","FormLayout","withBorders","containerPadding","Box","className","sx","display","gap","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","InputBox","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","tooltip","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","type","color","variant","onClick","resetForm","disabled"],"sourceRoot":""}