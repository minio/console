{"version":3,"file":"static/js/2704.1285a8c1.chunk.js","mappings":"uOA0CA,MAwGA,EAxGqBA,IAIC,IAJA,qBACpBC,EAAoB,KACpBC,EAAI,WACJC,GACcH,EACd,MAAMI,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,KACnBC,GAAoBA,EAAMC,cAAcC,OAAOJ,gBAE5CK,GAAaJ,EAAAA,EAAAA,KAChBC,GAAoBA,EAAMC,cAAcC,OAAOE,gBAG3CC,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAkB,IACvDC,EAAoBC,IAAyBF,EAAAA,EAAAA,WAAkB,IAC/DG,EAAcC,IAAmBJ,EAAAA,EAAAA,UACtCK,EAAAA,GAASC,WAAW,IAAIC,QAG1BC,EAAAA,EAAAA,YAAU,KACJjB,IACFW,GAAsB,GACtBE,EACEC,EAAAA,GAASI,QAAQb,GAAcS,EAAAA,GAASK,MAAMC,SAAW,KAE7D,GACC,CAACpB,EAAeK,IAoBnB,OACEgB,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACXC,UAAW3B,EACX4B,QAASA,KACP7B,GAAsB,EAExB8B,MAAO,YAAY5B,IAAa6B,UAEhCC,EAAAA,EAAAA,MAACC,EAAAA,IAAU,CAACC,aAAa,EAAOC,kBAAkB,EAAMJ,SAAA,EACtDL,EAAAA,EAAAA,KAACU,EAAAA,IAAa,CACZC,MAAOpB,EACPqB,SAAWC,GAAcA,EAAWrB,EAAgBqB,GAAY,KAChEC,GAAG,kBACHC,MAAM,YACNC,WAAY,MACZC,iBAAiB,EACjBC,UAAW7B,IAGZV,IACCqB,EAAAA,EAAAA,KAACmB,EAAAA,IAAM,CACLR,MAAM,SACNG,GAAG,SACHM,KAAK,SACLC,QAAShC,EACTuB,SAAWU,IACThC,EAAsBgC,EAAEC,OAAOF,QAAQ,EAEzCN,MAAO,iBACPS,gBAAiB,CAAC,UAAW,eAGjCxB,EAAAA,EAAAA,KAACyB,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAIC,EAAAA,GAAgBC,eAAezB,UACpDL,EAAAA,EAAAA,KAAC+B,EAAAA,IAAM,CACLC,KAAK,SACLC,QAAQ,aACRf,SAAUhC,IAAoBK,GAAgBF,EAC9C6C,QAvDUC,MACb9C,GAAsBV,EACzBF,GAAS2D,EAAAA,EAAAA,QAETjD,GAAkB,GAClBV,GACE4D,EAAAA,EAAAA,IAAgB,CACdxD,OAAO,EACPyD,OAAQ9D,EACRQ,WAAYO,EAAaQ,YAI/BtB,GAAS8D,EAAAA,EAAAA,KAAqB,IAE9BjE,GAAsB,EAyCdwC,GAAI,sBACJC,OACG1B,GAAsBV,EACnB,oBACA,uBAKTO,IACCc,EAAAA,EAAAA,KAACyB,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAGtB,UAChBL,EAAAA,EAAAA,KAACwC,EAAAA,IAAW,UAIL,C","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/RewindEnable.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport {\n  Button,\n  DateTimeInput,\n  FormLayout,\n  Grid,\n  ProgressBar,\n  Switch,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  resetRewind,\n  setReloadObjectsList,\n  setRewindEnable,\n} from \"../../../../ObjectBrowser/objectBrowserSlice\";\nimport { modalStyleUtils } from \"../../../../Common/FormComponents/common/styleLibrary\";\n\ninterface IRewindEnable {\n  closeModalAndRefresh: () => void;\n  open: boolean;\n  bucketName: string;\n}\n\nconst RewindEnable = ({\n  closeModalAndRefresh,\n  open,\n  bucketName,\n}: IRewindEnable) => {\n  const dispatch = useAppDispatch();\n\n  const rewindEnabled = useSelector(\n    (state: AppState) => state.objectBrowser.rewind.rewindEnabled,\n  );\n  const dateRewind = useSelector(\n    (state: AppState) => state.objectBrowser.rewind.dateToRewind,\n  );\n\n  const [rewindEnabling, setRewindEnabling] = useState<boolean>(false);\n  const [rewindEnableButton, setRewindEnableButton] = useState<boolean>(true);\n  const [dateSelected, setDateSelected] = useState<DateTime>(\n    DateTime.fromJSDate(new Date()),\n  );\n\n  useEffect(() => {\n    if (rewindEnabled) {\n      setRewindEnableButton(true);\n      setDateSelected(\n        DateTime.fromISO(dateRewind || DateTime.now().toISO() || \"\"),\n      );\n    }\n  }, [rewindEnabled, dateRewind]);\n\n  const rewindApply = () => {\n    if (!rewindEnableButton && rewindEnabled) {\n      dispatch(resetRewind());\n    } else {\n      setRewindEnabling(true);\n      dispatch(\n        setRewindEnable({\n          state: true,\n          bucket: bucketName,\n          dateRewind: dateSelected.toISO(),\n        }),\n      );\n    }\n    dispatch(setReloadObjectsList(true));\n\n    closeModalAndRefresh();\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title={`Rewind - ${bucketName}`}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <DateTimeInput\n          value={dateSelected}\n          onChange={(dateTime) => (dateTime ? setDateSelected(dateTime) : null)}\n          id=\"rewind-selector\"\n          label=\"Rewind to\"\n          timeFormat={\"24h\"}\n          secondsSelector={false}\n          disabled={!rewindEnableButton}\n        />\n\n        {rewindEnabled && (\n          <Switch\n            value=\"status\"\n            id=\"status\"\n            name=\"status\"\n            checked={rewindEnableButton}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setRewindEnableButton(e.target.checked);\n            }}\n            label={\"Current Status\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          />\n        )}\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            type=\"button\"\n            variant=\"callAction\"\n            disabled={rewindEnabling || (!dateSelected && rewindEnableButton)}\n            onClick={rewindApply}\n            id={\"rewind-apply-button\"}\n            label={\n              !rewindEnableButton && rewindEnabled\n                ? \"Show Current Data\"\n                : \"Show Rewind Data\"\n            }\n          />\n        </Grid>\n\n        {rewindEnabling && (\n          <Grid item xs={12}>\n            <ProgressBar />\n          </Grid>\n        )}\n      </FormLayout>\n    </ModalWrapper>\n  );\n};\n\nexport default RewindEnable;\n"],"names":["_ref","closeModalAndRefresh","open","bucketName","dispatch","useAppDispatch","rewindEnabled","useSelector","state","objectBrowser","rewind","dateRewind","dateToRewind","rewindEnabling","setRewindEnabling","useState","rewindEnableButton","setRewindEnableButton","dateSelected","setDateSelected","DateTime","fromJSDate","Date","useEffect","fromISO","now","toISO","_jsx","ModalWrapper","modalOpen","onClose","title","children","_jsxs","FormLayout","withBorders","containerPadding","DateTimeInput","value","onChange","dateTime","id","label","timeFormat","secondsSelector","disabled","Switch","name","checked","e","target","indicatorLabels","Grid","item","xs","sx","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","rewindApply","resetRewind","setRewindEnable","bucket","setReloadObjectsList","ProgressBar"],"sourceRoot":""}