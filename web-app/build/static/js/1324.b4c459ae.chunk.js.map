{"version":3,"file":"static/js/1324.b4c459ae.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Groups/DeleteGroup.tsx","screens/Console/Groups/AddGroupMember.tsx","screens/Console/Groups/GroupsDetails.tsx","screens/Console/Groups/UsersSelectors.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { ApiError, HttpResponse } from \"api/consoleApi\";\n\ninterface IDeleteGroup {\n  selectedGroups: string[];\n  deleteOpen: boolean;\n  closeDeleteModalAndRefresh: any;\n}\n\nconst DeleteGroup = ({\n  selectedGroups,\n  deleteOpen,\n  closeDeleteModalAndRefresh,\n}: IDeleteGroup) => {\n  const dispatch = useAppDispatch();\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [loadingDelete, setLoadingDelete] = useState<boolean>(false);\n\n  if (!selectedGroups) {\n    return null;\n  }\n  const onDeleteGroups = () => {\n    for (let group of selectedGroups) {\n      setLoadingDelete(true);\n      api.group\n        .removeGroup(group)\n        .then((_) => {\n          closeDeleteModalAndRefresh(true);\n        })\n        .catch(async (res: HttpResponse<void, ApiError>) => {\n          const err = (await res.json()) as ApiError;\n          dispatch(setErrorSnackMessage(errorToHandler(err)));\n          closeDeleteModalAndRefresh(false);\n        })\n        .finally(() => setLoadingDelete(false));\n    }\n  };\n\n  const renderGroups = selectedGroups.map((group) => (\n    <div key={group}>\n      <b>{group}</b>\n    </div>\n  ));\n\n  return (\n    <ConfirmDialog\n      title={`Delete Group${selectedGroups.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={loadingDelete}\n      onConfirm={onDeleteGroups}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the following{\" \"}\n          {selectedGroups.length === 1 ? \"\" : selectedGroups.length} group\n          {selectedGroups.length > 1 ? \"s?\" : \"?\"}\n          {renderGroups}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteGroup;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ntype UserPickerModalProps = {\n  title?: string;\n  preSelectedUsers?: string[];\n  selectedGroup?: string;\n  open: boolean;\n  onClose: () => void;\n  onSaveClick: () => void;\n  groupStatus?: string;\n};\n\nconst AddGroupMember = ({\n  title = \"\",\n  groupStatus = \"enabled\",\n  preSelectedUsers = [],\n  selectedGroup = \"\",\n  open,\n  onClose,\n}: UserPickerModalProps) => {\n  const dispatch = useAppDispatch();\n  const [selectedUsers, setSelectedUsers] = useState(preSelectedUsers);\n\n  function addMembersToGroup() {\n    return api.group\n      .updateGroup(selectedGroup, {\n        members: selectedUsers,\n        status: groupStatus,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        onClose();\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={onClose}\n      title={title}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <ReadBox label={`Selected Group`} sx={{ width: \"100%\" }}>\n          {selectedGroup}\n        </ReadBox>\n        <UsersSelectors\n          selectedUsers={selectedUsers}\n          setSelectedUsers={setSelectedUsers}\n          editMode={!selectedGroup}\n        />\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-add-group-member\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={() => {\n            setSelectedUsers(preSelectedUsers);\n          }}\n          label={\"Reset\"}\n        />\n\n        <Button\n          id={\"save-add-group-member\"}\n          type=\"button\"\n          variant=\"callAction\"\n          onClick={() => {\n            addMembersToGroup();\n          }}\n          label={\"Save\"}\n        />\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default AddGroupMember;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  GroupsIcon,\n  IAMPoliciesIcon,\n  PageLayout,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Group } from \"api/consoleApi\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  createGroupPermissions,\n  editGroupMembersPermissions,\n  enableDisableGroupPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  setGroupPoliciesPermissions,\n  viewPolicyPermissions,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport SetPolicy from \"../Policies/SetPolicy\";\nimport AddGroupMember from \"./AddGroupMember\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport SearchBox from \"../Common/SearchBox\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nconst formatPolicy = (policy: string = \"\"): string[] => {\n  if (policy.length <= 0) return [];\n  return policy.split(\",\");\n};\n\nconst GroupsDetails = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const [groupDetails, setGroupDetails] = useState<Group>({});\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [usersOpen, setUsersOpen] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [memberFilter, setMemberFilter] = useState<string>(\"\");\n  const [currentTab, setCurrentTab] = useState<string>(\"members\");\n\n  const { members = [], policy = \"\", status: groupEnabled } = groupDetails;\n\n  const filteredMembers = members.filter((elementItem) =>\n    elementItem.includes(memberFilter),\n  );\n\n  const viewUser = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewUserPermissions,\n    true,\n  );\n\n  useEffect(() => {\n    dispatch(setHelpName(\"group_details\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (params.groupName) {\n      fetchGroupInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.groupName]);\n\n  const groupPolicies = formatPolicy(policy);\n  const isGroupEnabled = groupEnabled === \"enabled\";\n  const memberActionText = members.length > 0 ? \"Edit Members\" : \"Add Members\";\n\n  const getGroupDetails = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    getGroupPermissions,\n  );\n\n  const canEditGroupMembers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    editGroupMembersPermissions,\n    true,\n  );\n\n  const canSetPolicies = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    setGroupPoliciesPermissions,\n    true,\n  );\n\n  const canViewPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewPolicyPermissions,\n    true,\n  );\n\n  function fetchGroupInfo() {\n    if (getGroupDetails) {\n      api.group\n        .groupInfo(params.groupName || \"\")\n        .then((res) => {\n          setGroupDetails(res.data);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setGroupDetails({});\n        });\n    }\n  }\n\n  function toggleGroupStatus(nextStatus: boolean) {\n    return api.group\n      .updateGroup(params.groupName || \"\", {\n        members: members,\n        status: nextStatus ? \"enabled\" : \"disabled\",\n      })\n      .then(() => {\n        fetchGroupInfo();\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  const groupsTabContent = (\n    <Box\n      onMouseMove={() => {\n        dispatch(setHelpName(\"groups_members\"));\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: 10,\n            }}\n          >\n            <SearchBox\n              placeholder={\"Search members\"}\n              onChange={(searchText) => {\n                setMemberFilter(searchText);\n              }}\n              value={memberFilter}\n              sx={{\n                maxWidth: 280,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={addUserToGroupPermissions}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  canEditGroupMembers\n                    ? memberActionText\n                    : permissionTooltipHelper(\n                        createGroupPermissions,\n                        \"edit Group membership\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-user-group\"}\n                  label={memberActionText}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    setUsersOpen(true);\n                  }}\n                  disabled={!canEditGroupMembers}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Members\n      </SectionTitle>\n      <Grid item xs={12}>\n        <SecureComponent\n          resource={CONSOLE_UI_RESOURCE}\n          scopes={listUsersPermissions}\n          errorProps={{ disabled: true }}\n        >\n          <TooltipWrapper\n            tooltip={\n              viewUser\n                ? \"\"\n                : permissionTooltipHelper(\n                    viewUserPermissions,\n                    \"view User details\",\n                  )\n            }\n          >\n            <DataTable\n              itemActions={[\n                {\n                  type: \"view\",\n                  onClick: (userName) => {\n                    navigate(\n                      `${IAM_PAGES.USERS}/${encodeURIComponent(userName)}`,\n                    );\n                  },\n                  isDisabled: !viewUser,\n                },\n              ]}\n              columns={[{ label: \"Access Key\" }]}\n              selectedItems={[]}\n              isLoading={false}\n              records={filteredMembers}\n              entityName=\"Users\"\n            />\n          </TooltipWrapper>\n        </SecureComponent>\n      </Grid>\n    </Box>\n  );\n\n  const policiesTabContent = (\n    <Fragment>\n      <Box\n        onMouseMove={() => {\n          dispatch(setHelpName(\"groups_policies\"));\n        }}\n      >\n        <SectionTitle\n          separator\n          sx={{ marginBottom: 15 }}\n          actions={\n            <TooltipWrapper\n              tooltip={\n                canSetPolicies\n                  ? \"Set Policies\"\n                  : permissionTooltipHelper(\n                      setGroupPoliciesPermissions,\n                      \"assign Policies\",\n                    )\n              }\n            >\n              <Button\n                id={\"set-policies\"}\n                label={`Set Policies`}\n                variant=\"callAction\"\n                icon={<IAMPoliciesIcon />}\n                onClick={() => {\n                  setPolicyOpen(true);\n                }}\n                disabled={!canSetPolicies}\n              />\n            </TooltipWrapper>\n          }\n        >\n          Policies\n        </SectionTitle>\n      </Box>\n      <Grid item xs={12}>\n        <TooltipWrapper\n          tooltip={\n            canViewPolicy\n              ? \"\"\n              : permissionTooltipHelper(\n                  viewPolicyPermissions,\n                  \"view Policy details\",\n                )\n          }\n        >\n          <DataTable\n            itemActions={[\n              {\n                type: \"view\",\n                onClick: (policy) => {\n                  navigate(\n                    `${IAM_PAGES.POLICIES}/${encodeURIComponent(policy)}`,\n                  );\n                },\n                isDisabled: !canViewPolicy,\n              },\n            ]}\n            columns={[{ label: \"Policy\" }]}\n            isLoading={false}\n            records={groupPolicies}\n            entityName=\"Policies\"\n          />\n        </TooltipWrapper>\n      </Grid>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {policyOpen ? (\n        <SetPolicy\n          open={policyOpen}\n          selectedGroups={[params.groupName || \"\"]}\n          selectedUser={null}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            fetchGroupInfo();\n            dispatch(setSelectedPolicies([]));\n          }}\n        />\n      ) : null}\n\n      {usersOpen ? (\n        <AddGroupMember\n          selectedGroup={params.groupName}\n          onSaveClick={() => {}}\n          title={memberActionText}\n          groupStatus={groupEnabled}\n          preSelectedUsers={members}\n          open={usersOpen}\n          onClose={() => {\n            setUsersOpen(false);\n            fetchGroupInfo();\n          }}\n        />\n      ) : null}\n\n      {deleteOpen && (\n        <DeleteGroup\n          deleteOpen={deleteOpen}\n          selectedGroups={[params.groupName || \"\"]}\n          closeDeleteModalAndRefresh={(isDelSuccess: boolean) => {\n            setDeleteOpen(false);\n            if (isDelSuccess) {\n              navigate(IAM_PAGES.GROUPS);\n            }\n          }}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Groups\"}\n              onClick={() => navigate(IAM_PAGES.GROUPS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <ScreenTitle\n            icon={\n              <Fragment>\n                <GroupsIcon width={40} />\n              </Fragment>\n            }\n            title={params.groupName || \"\"}\n            subTitle={null}\n            bottomBorder\n            actions={\n              <Box\n                sx={{\n                  display: \"flex\",\n                  fontSize: 14,\n                  alignItems: \"center\",\n                  gap: 15,\n                }}\n              >\n                <span>Group Status:</span>\n                <span id=\"group-status-label\" style={{ fontWeight: \"bold\" }}>\n                  {isGroupEnabled ? \"Enabled\" : \"Disabled\"}\n                </span>\n                <TooltipWrapper\n                  tooltip={\n                    hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      enableDisableGroupPermissions,\n                      true,\n                    )\n                      ? \"\"\n                      : permissionTooltipHelper(\n                          enableDisableGroupPermissions,\n                          \"enable or disable Groups\",\n                        )\n                  }\n                >\n                  <SecureComponent\n                    resource={CONSOLE_UI_RESOURCE}\n                    scopes={enableDisableGroupPermissions}\n                    errorProps={{ disabled: true }}\n                    matchAll\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={isGroupEnabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        toggleGroupStatus(!isGroupEnabled);\n                      }}\n                      switchOnly\n                    />\n                  </SecureComponent>\n                </TooltipWrapper>\n\n                <TooltipWrapper tooltip={\"Delete Group\"}>\n                  <Button\n                    id={\"delete-user-group\"}\n                    variant=\"secondary\"\n                    icon={<TrashIcon />}\n                    onClick={() => {\n                      setDeleteOpen(true);\n                    }}\n                  />\n                </TooltipWrapper>\n              </Box>\n            }\n            sx={{ marginBottom: 15 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Tabs\n            options={[\n              {\n                tabConfig: { id: \"members\", label: \"Members\" },\n                content: groupsTabContent,\n              },\n              {\n                tabConfig: { id: \"policies\", label: \"Policies\" },\n                content: policiesTabContent,\n              },\n            ]}\n            currentTabOrPath={currentTab}\n            onTabClick={setCurrentTab}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\n\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <ProgressBar />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      users = [\" \"];\n\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURIComponent(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["_ref","onClose","modalOpen","title","children","wideLimit","titleIcon","iconColor","sx","dispatch","useAppDispatch","openSnackbar","setOpenSnackbar","useState","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","detailedErrorMsg","length","_jsxs","ModalBox","open","widthLimit","_jsx","MainError","isModal","Snackbar","closeSnackBar","mode","variant","autoHideDuration","condensed","selectedGroups","deleteOpen","closeDeleteModalAndRefresh","loadingDelete","setLoadingDelete","renderGroups","map","group","ConfirmDialog","confirmText","isOpen","ConfirmDeleteIcon","isLoading","onConfirm","onDeleteGroups","api","removeGroup","then","_","catch","async","err","res","json","setErrorSnackMessage","errorToHandler","finally","confirmationContent","Fragment","groupStatus","preSelectedUsers","selectedGroup","selectedUsers","setSelectedUsers","ModalWrapper","AddMembersToGroupIcon","FormLayout","withBorders","containerPadding","ReadBox","label","width","UsersSelectors","editMode","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","id","onClick","updateGroup","members","status","setModalErrorSnackMessage","error","GroupsDetails","navigate","useNavigate","params","useParams","groupDetails","setGroupDetails","policyOpen","setPolicyOpen","usersOpen","setUsersOpen","setDeleteOpen","memberFilter","setMemberFilter","currentTab","setCurrentTab","policy","groupEnabled","filteredMembers","filter","elementItem","includes","viewUser","hasPermission","CONSOLE_UI_RESOURCE","viewUserPermissions","setHelpName","groupName","fetchGroupInfo","groupPolicies","arguments","undefined","split","formatPolicy","isGroupEnabled","memberActionText","getGroupDetails","getGroupPermissions","canEditGroupMembers","editGroupMembersPermissions","canSetPolicies","setGroupPoliciesPermissions","canViewPolicy","viewPolicyPermissions","groupInfo","data","groupsTabContent","Box","onMouseMove","SectionTitle","separator","marginBottom","actions","display","gap","SearchBox","placeholder","onChange","searchText","value","maxWidth","SecureComponent","resource","scopes","addUserToGroupPermissions","errorProps","disabled","TooltipWrapper","tooltip","permissionTooltipHelper","createGroupPermissions","icon","AddIcon","listUsersPermissions","DataTable","itemActions","userName","IAM_PAGES","USERS","encodeURIComponent","isDisabled","columns","selectedItems","records","entityName","policiesTabContent","IAMPoliciesIcon","POLICIES","SetPolicy","selectedUser","closeModalAndRefresh","setSelectedPolicies","AddGroupMember","onSaveClick","DeleteGroup","isDelSuccess","GROUPS","PageHeaderWrapper","BackLink","HelpMenu","PageLayout","ScreenTitle","GroupsIcon","subTitle","bottomBorder","fontSize","alignItems","style","fontWeight","enableDisableGroupPermissions","matchAll","Switch","indicatorLabels","checked","name","nextStatus","switchOnly","TrashIcon","Tabs","options","tabConfig","content","currentTabOrPath","onTabClick","setRecords","loading","setFilter","fetchUsers","useCallback","users","listUsers","get","sort","usersSort","selUsers","filteredRecords","accessKey","className","ProgressBar","elementKey","onSelect","e","targetD","target","elements","push","element","idField","customPaperHeight","textAlign","padding","noTitle","currentPolicies","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","policySort","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","groupPolicy","userPolicy","join","PolicySelectors","resetSelection","color","setPolicyAction","groups","a","b","stringSort","policyDetailsSort"],"sourceRoot":""}