{"version":3,"file":"static/js/9714.cf260d8c.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EditReplicationModal.tsx","screens/Console/Common/FormComponents/QueryMultiSelector/QueryMultiSelector.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  BucketReplicationIcon,\n  Button,\n  FormLayout,\n  InputBox,\n  ReadBox,\n  Switch,\n  Grid,\n} from \"mds\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport QueryMultiSelector from \"../../Common/FormComponents/QueryMultiSelector/QueryMultiSelector\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\n\ninterface IEditReplicationModal {\n  closeModalAndRefresh: (refresh: boolean) => void;\n  open: boolean;\n  bucketName: string;\n  ruleID: string;\n}\n\nconst EditReplicationModal = ({\n  closeModalAndRefresh,\n  open,\n  bucketName,\n  ruleID,\n}: IEditReplicationModal) => {\n  const dispatch = useAppDispatch();\n  const [editLoading, setEditLoading] = useState<boolean>(true);\n  const [saveEdit, setSaveEdit] = useState<boolean>(false);\n  const [priority, setPriority] = useState<string>(\"1\");\n  const [destination, setDestination] = useState<string>(\"\");\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [repDeleteMarker, setRepDeleteMarker] = useState<boolean>(false);\n  const [metadataSync, setMetadataSync] = useState<boolean>(false);\n  const [initialTags, setInitialTags] = useState<string>(\"\");\n  const [tags, setTags] = useState<string>(\"\");\n  const [targetStorageClass, setTargetStorageClass] = useState<string>(\"\");\n  const [repExisting, setRepExisting] = useState<boolean>(false);\n  const [repDelete, setRepDelete] = useState<boolean>(false);\n  const [ruleState, setRuleState] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (editLoading) {\n      api.buckets\n        .getBucketReplicationRule(bucketName, ruleID)\n        .then((res) => {\n          setPriority(res.data.priority ? res.data.priority.toString() : \"\");\n          const pref = res.data.prefix || \"\";\n          const tag = res.data.tags || \"\";\n          setPrefix(pref);\n          setInitialTags(tag);\n          setTags(tag);\n          setDestination(res.data.destination?.bucket || \"\");\n          setRepDeleteMarker(res.data.delete_marker_replication || false);\n          setTargetStorageClass(res.data.storageClass || \"\");\n          setRepExisting(!!res.data.existingObjects);\n          setRepDelete(!!res.data.deletes_replication);\n          setRuleState(res.data.status === \"Enabled\");\n          setMetadataSync(!!res.data.metadata_replication);\n\n          setEditLoading(false);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setEditLoading(false);\n        });\n    }\n  }, [editLoading, dispatch, bucketName, ruleID]);\n\n  useEffect(() => {\n    if (saveEdit) {\n      const remoteBucketsInfo = {\n        arn: destination,\n        ruleState: ruleState,\n        prefix: prefix,\n        tags: tags,\n        replicateDeleteMarkers: repDeleteMarker,\n        replicateDeletes: repDelete,\n        replicateExistingObjects: repExisting,\n        replicateMetadata: metadataSync,\n        priority: parseInt(priority),\n        storageClass: targetStorageClass,\n      };\n\n      api.buckets\n        .updateMultiBucketReplication(bucketName, ruleID, remoteBucketsInfo)\n        .then(() => {\n          setSaveEdit(false);\n          closeModalAndRefresh(true);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setSaveEdit(false);\n        });\n    }\n  }, [\n    saveEdit,\n    bucketName,\n    ruleID,\n    destination,\n    prefix,\n    tags,\n    repDeleteMarker,\n    priority,\n    repDelete,\n    repExisting,\n    ruleState,\n    metadataSync,\n    targetStorageClass,\n    closeModalAndRefresh,\n    dispatch,\n  ]);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(false);\n      }}\n      title=\"Edit Bucket Replication\"\n      titleIcon={<BucketReplicationIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setSaveEdit(true);\n        }}\n      >\n        <FormLayout containerPadding={false} withBorders={false}>\n          <Switch\n            checked={ruleState}\n            id=\"ruleState\"\n            name=\"ruleState\"\n            label=\"Rule State\"\n            onChange={(e) => {\n              setRuleState(e.target.checked);\n            }}\n          />\n          <ReadBox label={\"Destination\"} sx={{ width: \"100%\" }}>\n            {destination}\n          </ReadBox>\n\n          <InputBox\n            id=\"priority\"\n            name=\"priority\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              if (e.target.validity.valid) {\n                setPriority(e.target.value);\n              }\n            }}\n            label=\"Priority\"\n            value={priority}\n            pattern={\"[0-9]*\"}\n          />\n          <InputBox\n            id=\"storageClass\"\n            name=\"storageClass\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTargetStorageClass(e.target.value);\n            }}\n            placeholder=\"STANDARD_IA,REDUCED_REDUNDANCY etc\"\n            label=\"Storage Class\"\n            value={targetStorageClass}\n          />\n          <fieldset className={\"inputItem\"}>\n            <legend>Object Filters</legend>\n            <InputBox\n              id=\"prefix\"\n              name=\"prefix\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setPrefix(e.target.value);\n              }}\n              placeholder=\"prefix\"\n              label=\"Prefix\"\n              value={prefix}\n            />\n            <QueryMultiSelector\n              name=\"tags\"\n              label=\"Tags\"\n              elements={initialTags}\n              onChange={(vl: string) => {\n                setTags(vl);\n              }}\n              keyPlaceholder=\"Tag Key\"\n              valuePlaceholder=\"Tag Value\"\n              withBorder\n            />\n          </fieldset>\n          <fieldset className={\"inputItem\"}>\n            <legend>Replication Options</legend>\n\n            <Switch\n              checked={repExisting}\n              id=\"repExisting\"\n              name=\"repExisting\"\n              label=\"Existing Objects\"\n              onChange={(e) => {\n                setRepExisting(e.target.checked);\n              }}\n              description={\"Replicate existing objects\"}\n            />\n\n            <Switch\n              checked={metadataSync}\n              id=\"metadatataSync\"\n              name=\"metadatataSync\"\n              label=\"Metadata Sync\"\n              onChange={(e) => {\n                setMetadataSync(e.target.checked);\n              }}\n              description={\"Metadata Sync\"}\n            />\n\n            <Switch\n              checked={repDeleteMarker}\n              id=\"deleteMarker\"\n              name=\"deleteMarker\"\n              label=\"Delete Marker\"\n              onChange={(e) => {\n                setRepDeleteMarker(e.target.checked);\n              }}\n              description={\"Replicate soft deletes\"}\n            />\n            <Switch\n              checked={repDelete}\n              id=\"repDelete\"\n              name=\"repDelete\"\n              label=\"Deletes\"\n              onChange={(e) => {\n                setRepDelete(e.target.checked);\n              }}\n              description={\"Replicate versioned deletes\"}\n            />\n          </fieldset>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel-edit-replication\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={editLoading || saveEdit}\n              onClick={() => {\n                closeModalAndRefresh(false);\n              }}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"save-replication\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={editLoading || saveEdit}\n              label={\"Save\"}\n            />\n          </Grid>\n        </FormLayout>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default EditReplicationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  Fragment,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport {\n  AddIcon,\n  Box,\n  Grid,\n  HelpIcon,\n  InputBox,\n  InputLabel,\n  Tooltip,\n} from \"mds\";\n\ninterface IQueryMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst QueryMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  keyPlaceholder = \"\",\n  valuePlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: IQueryMultiSelector) => {\n  const [currentKeys, setCurrentKeys] = useState<string[]>([\"\"]);\n  const [currentValues, setCurrentValues] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentKeys.length === 1 &&\n      currentKeys[0] === \"\" &&\n      currentValues.length === 1 &&\n      currentValues[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\"&\");\n      let keys = [];\n      let values = [];\n\n      elementsSplit.forEach((element: string) => {\n        const splittedVals = element.split(\"=\");\n        if (splittedVals.length === 2) {\n          keys.push(splittedVals[0]);\n          values.push(splittedVals[1]);\n        }\n      });\n\n      keys.push(\"\");\n      values.push(\"\");\n\n      setCurrentKeys(keys);\n      setCurrentValues(values);\n    }\n  }, [currentKeys, currentValues, elements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    const refScroll = bottomList.current;\n    if (refScroll && currentKeys.length > 1) {\n      refScroll.scrollIntoView(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentKeys]);\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    debouncedOnChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentKeys, currentValues]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = () => {\n    if (\n      currentKeys[currentKeys.length - 1].trim() !== \"\" &&\n      currentValues[currentValues.length - 1].trim() !== \"\"\n    ) {\n      const keysList = [...currentKeys];\n      const valuesList = [...currentValues];\n\n      keysList.push(\"\");\n      valuesList.push(\"\");\n\n      setCurrentKeys(keysList);\n      setCurrentValues(valuesList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeKey = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentKeys];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentKeys(updatedElement);\n  };\n\n  const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentValues];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentValues(updatedElement);\n  };\n\n  // Debounce for On Change\n  const debouncedOnChange = debounce(() => {\n    let queryString = \"\";\n\n    currentKeys.forEach((keyVal, index) => {\n      if (currentKeys[index] && currentValues[index]) {\n        let insertString = `${keyVal}=${currentValues[index]}`;\n        if (index !== 0) {\n          insertString = `&${insertString}`;\n        }\n        queryString = `${queryString}${insertString}`;\n      }\n    });\n\n    onChange(queryString);\n  }, 500);\n\n  const inputs = currentValues.map((element, index) => {\n    return (\n      <Grid\n        item\n        xs={12}\n        className={\"lineInputBoxes inputItem\"}\n        key={`query-pair-${name}-${index.toString()}`}\n      >\n        <InputBox\n          id={`${name}-key-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentKeys[index]}\n          onChange={onChangeKey}\n          index={index}\n          placeholder={keyPlaceholder}\n        />\n        <span className={\"queryDiv\"}>:</span>\n        <InputBox\n          id={`${name}-value-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentValues[index]}\n          onChange={onChangeValue}\n          index={index}\n          placeholder={valuePlaceholder}\n          overlayIcon={index === currentValues.length - 1 ? <AddIcon /> : null}\n          overlayAction={() => {\n            addEmptyLine();\n          }}\n        />\n      </Grid>\n    );\n  });\n\n  return (\n    <Fragment>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          \"& .lineInputBoxes\": {\n            display: \"flex\",\n          },\n          \"& .queryDiv\": {\n            alignSelf: \"center\",\n            margin: \"-15px 4px 0\",\n            fontWeight: 600,\n          },\n        }}\n        className={\"inputItem\"}\n      >\n        <InputLabel>\n          {label}\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <HelpIcon style={{ width: 13, height: 13 }} />\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            padding: 15,\n            height: 150,\n            overflowY: \"auto\",\n            position: \"relative\",\n            marginTop: 15,\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Grid>\n    </Fragment>\n  );\n};\nexport default QueryMultiSelector;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","closeModalAndRefresh","open","bucketName","ruleID","dispatch","useAppDispatch","editLoading","setEditLoading","useState","saveEdit","setSaveEdit","priority","setPriority","destination","setDestination","prefix","setPrefix","repDeleteMarker","setRepDeleteMarker","metadataSync","setMetadataSync","initialTags","setInitialTags","tags","setTags","targetStorageClass","setTargetStorageClass","repExisting","setRepExisting","repDelete","setRepDelete","ruleState","setRuleState","useEffect","api","buckets","getBucketReplicationRule","then","res","_res$data$destination","data","toString","pref","tag","bucket","delete_marker_replication","storageClass","existingObjects","deletes_replication","status","metadata_replication","catch","err","setModalErrorSnackMessage","errorToHandler","error","remoteBucketsInfo","arn","replicateDeleteMarkers","replicateDeletes","replicateExistingObjects","replicateMetadata","parseInt","updateMultiBucketReplication","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","BucketReplicationIcon","children","noValidate","autoComplete","onSubmit","e","preventDefault","_jsxs","FormLayout","containerPadding","withBorders","Switch","checked","id","name","label","onChange","target","ReadBox","sx","width","InputBox","validity","valid","value","pattern","placeholder","className","QueryMultiSelector","elements","vl","keyPlaceholder","valuePlaceholder","withBorder","description","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","type","variant","disabled","onClick","tooltip","currentKeys","setCurrentKeys","currentValues","setCurrentValues","bottomList","createRef","length","elementsSplit","split","keys","values","forEach","element","splittedVals","push","refScroll","current","scrollIntoView","firstUpdate","useRef","useLayoutEffect","debouncedOnChange","onChangeKey","persist","updatedElement","index","get","onChangeValue","debounce","queryString","keyVal","insertString","inputs","map","overlayIcon","AddIcon","overlayAction","addEmptyLine","trim","keysList","valuesList","Fragment","display","alignSelf","margin","fontWeight","InputLabel","Box","marginLeft","alignItems","Tooltip","placement","HelpIcon","style","height","padding","overflowY","position","marginTop","ref","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","detailedErrorMsg","ModalBox","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}