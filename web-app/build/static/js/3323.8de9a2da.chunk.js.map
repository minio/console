{"version":3,"file":"static/js/3323.8de9a2da.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/CustomForms/ConfMySql.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { IElementValue } from \"../../Configurations/types\";\nimport {\n  Box,\n  CommentBox,\n  FormLayout,\n  Grid,\n  InputBox,\n  RadioGroup,\n  ReadBox,\n  Switch,\n} from \"mds\";\n\ninterface IConfMySqlProps {\n  onChange: (newValue: IElementValue[]) => void;\n}\n\nconst ConfMySql = ({ onChange }: IConfMySqlProps) => {\n  //Local States\n  const [useDsnString, setUseDsnString] = useState<boolean>(false);\n  const [dsnString, setDsnString] = useState<string>(\"\");\n  const [host, setHostname] = useState<string>(\"\");\n  const [dbName, setDbName] = useState<string>(\"\");\n  const [port, setPort] = useState<string>(\"\");\n  const [user, setUser] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const [table, setTable] = useState<string>(\"\");\n  const [format, setFormat] = useState<string>(\"namespace\");\n  const [queueDir, setQueueDir] = useState<string>(\"\");\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\n  const [comment, setComment] = useState<string>(\"\");\n\n  // dsn_string*  (string)             MySQL data-source-name connection string e.g. \"<user>:<password>@tcp(<host>:<port>)/<database>\"\n  // table*       (string)             DB table name to store/update events, table is auto-created\n  // format*      (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\n  // queue_dir    (path)               staging dir for undelivered messages e.g. '/home/events'\n  // queue_limit  (number)             maximum limit for undelivered messages, defaults to '100000'\n  // comment      (sentence)           optionally add a comment to this setting\n\n  const parseDsnString = (\n    input: string,\n    keys: string[],\n  ): Map<string, string> => {\n    let kvFields: Map<string, string> = new Map();\n    const regex = /(.*?):(.*?)@tcp\\((.*?):(.*?)\\)\\/(.*?)$/gm;\n    let m;\n\n    while ((m = regex.exec(input)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      kvFields.set(\"user\", m[1]);\n      kvFields.set(\"password\", m[2]);\n      kvFields.set(\"host\", m[3]);\n      kvFields.set(\"port\", m[4]);\n      kvFields.set(\"dbname\", m[5]);\n    }\n\n    return kvFields;\n  };\n\n  const configToDsnString = useCallback((): string => {\n    return `${user}:${password}@tcp(${host}:${port})/${dbName}`;\n  }, [user, password, host, port, dbName]);\n\n  useEffect(() => {\n    if (dsnString !== \"\") {\n      const formValues = [\n        { key: \"dsn_string\", value: dsnString },\n        { key: \"table\", value: table },\n        { key: \"format\", value: format },\n        { key: \"queue_dir\", value: queueDir },\n        { key: \"queue_limit\", value: queueLimit },\n        { key: \"comment\", value: comment },\n      ];\n\n      onChange(formValues);\n    }\n  }, [dsnString, table, format, queueDir, queueLimit, comment, onChange]);\n\n  useEffect(() => {\n    const cs = configToDsnString();\n    setDsnString(cs);\n  }, [user, dbName, password, port, host, setDsnString, configToDsnString]);\n\n  const switcherChangeEvt = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      // build dsn_string\n      const cs = configToDsnString();\n      setDsnString(cs);\n    } else {\n      // parse dsn_string\n      const kv = parseDsnString(dsnString, [\n        \"host\",\n        \"port\",\n        \"dbname\",\n        \"user\",\n        \"password\",\n      ]);\n      setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\n      setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\n      setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\n      setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\n      setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\n    }\n\n    setUseDsnString(event.target.checked);\n  };\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      <Switch\n        label={\"Enter DNS String\"}\n        checked={useDsnString}\n        id=\"checkedB\"\n        name=\"checkedB\"\n        onChange={switcherChangeEvt}\n        value={\"dnsString\"}\n      />\n      {useDsnString ? (\n        <React.Fragment>\n          <Box className={\"inputItem\"}>\n            <InputBox\n              id=\"dsn-string\"\n              name=\"dsn_string\"\n              label=\"DSN String\"\n              value={dsnString}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setDsnString(e.target.value);\n              }}\n            />\n          </Box>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <Box>\n            <Box\n              withBorders\n              useBackground\n              sx={{\n                overflowY: \"auto\",\n                height: 170,\n                marginBottom: 12,\n              }}\n            >\n              <InputBox\n                id=\"host\"\n                name=\"host\"\n                label=\"\"\n                placeholder=\"Enter Host\"\n                value={host}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setHostname(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"db-name\"\n                name=\"db-name\"\n                label=\"\"\n                placeholder=\"Enter DB Name\"\n                value={dbName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setDbName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"port\"\n                name=\"port\"\n                label=\"\"\n                placeholder=\"Enter Port\"\n                value={port}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPort(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"user\"\n                name=\"user\"\n                label=\"\"\n                placeholder=\"Enter User\"\n                value={user}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setUser(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"password\"\n                name=\"password\"\n                label=\"\"\n                placeholder=\"Enter Password\"\n                type=\"password\"\n                value={password}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPassword(e.target.value);\n                }}\n              />\n            </Box>\n          </Box>\n          <Grid item xs={12} sx={{ margin: \"12px 0\" }}>\n            <ReadBox label={\"Connection String\"} multiLine>\n              {dsnString}\n            </ReadBox>\n          </Grid>\n        </React.Fragment>\n      )}\n      <InputBox\n        id=\"table\"\n        name=\"table\"\n        label=\"Table\"\n        placeholder=\"Enter Table Name\"\n        value={table}\n        tooltip=\"DB table name to store/update events, table is auto-created\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setTable(e.target.value);\n        }}\n      />\n      <RadioGroup\n        currentValue={format}\n        id=\"format\"\n        name=\"format\"\n        label=\"Format\"\n        onChange={(e) => {\n          setFormat(e.target.value);\n        }}\n        tooltip=\"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\"\n        selectorOptions={[\n          { label: \"Namespace\", value: \"namespace\" },\n          { label: \"Access\", value: \"access\" },\n        ]}\n      />\n      <InputBox\n        id=\"queue-dir\"\n        name=\"queue_dir\"\n        label=\"Queue Dir\"\n        placeholder=\"Enter Queue Dir\"\n        value={queueDir}\n        tooltip=\"Staging directory for undelivered messages e.g. '/home/events'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueDir(e.target.value);\n        }}\n      />\n      <InputBox\n        id=\"queue-limit\"\n        name=\"queue_limit\"\n        label=\"Queue Limit\"\n        placeholder=\"Enter Queue Limit\"\n        type=\"number\"\n        value={queueLimit}\n        tooltip=\"Maximum limit for undelivered messages, defaults to '10000'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueLimit(e.target.value);\n        }}\n      />\n      <CommentBox\n        id=\"comment\"\n        name=\"comment\"\n        label=\"Comment\"\n        placeholder=\"Enter custom notes if any\"\n        value={comment}\n        onChange={(e) => {\n          setComment(e.target.value);\n        }}\n      />\n    </FormLayout>\n  );\n};\n\nexport default ConfMySql;\n"],"names":["_ref","onChange","useDsnString","setUseDsnString","useState","dsnString","setDsnString","host","setHostname","dbName","setDbName","port","setPort","user","setUser","password","setPassword","table","setTable","format","setFormat","queueDir","setQueueDir","queueLimit","setQueueLimit","comment","setComment","configToDsnString","useCallback","useEffect","key","value","cs","_jsxs","FormLayout","withBorders","containerPadding","children","_jsx","Switch","label","checked","id","name","event","target","kv","parseDsnString","input","kvFields","Map","regex","m","exec","index","lastIndex","set","get","React","Box","className","InputBox","e","useBackground","sx","overflowY","height","marginBottom","placeholder","type","Grid","item","xs","margin","ReadBox","multiLine","tooltip","RadioGroup","currentValue","selectorOptions","CommentBox"],"sourceRoot":""}