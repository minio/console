{"version":3,"file":"static/js/4172.d98e6099.chunk.js","mappings":"qOAiCA,MA6DA,EA7DoBA,IAKM,IALL,2BACnBC,EAA0B,WAC1BC,EAAU,eACVC,EAAc,YACdC,GACkBJ,EAClB,MAAMK,GAAWC,EAAAA,EAAAA,OAMVC,EAAeC,IAAmBC,EAAAA,EAAAA,IALpBC,IAAMT,GAA2B,KAClCU,GAClBN,GAASO,EAAAA,EAAAA,IAAqBD,MAKhC,IAAKR,EACH,OAAO,KA8BT,OACEU,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,MAAO,eACPC,YAAa,SACbC,OAAQf,EACRgB,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,IAAiB,IAC7BC,UAAWb,EACXc,UAlCoBC,KACtB,GAAoB,OAAhBlB,EACF,OAGF,MAAMmB,EAAmBC,IAAIpB,EAAa,SAAU,IAC9CqB,EAASD,IAAIpB,EAAa,SAAU,IACpCsB,EAASF,IAAIpB,EAAa,SAAU,IAEpCuB,EAAcJ,EAAOK,QAAO,CAACC,EAAeC,IAC3CD,EAAIE,SAASD,GAGXD,EAFE,IAAIA,EAAKC,IAGjB,IAEHtB,EACE,SACA,mBAAmBL,YAAyBC,EAAY4B,MACxD,CACET,OAAQI,EACRF,SACAC,UAEH,EAWCO,QA3CYA,IAAMhC,GAA2B,GA4C7CiC,qBACErB,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,CAAAC,SAAC,iDAEZ,C,6DClFN,MAuBA,EAvBe3B,CACb4B,EACAC,KAEA,MAAOlB,EAAWmB,IAAgBC,EAAAA,EAAAA,WAAkB,GAgBpD,MAAO,CAACpB,EAdQqB,CAACC,EAAgBC,EAAaC,EAAYC,KACxDN,GAAa,GACbO,EAAAA,EACGC,OAAOL,EAAQC,EAAKC,EAAMC,GAC1BG,MAAMC,IACLV,GAAa,GACbF,EAAUY,EAAI,IAEfC,OAAOvC,IACN4B,GAAa,GACbD,EAAQ3B,EAAI,GACZ,EAGqB,C","sources":["screens/Console/Buckets/BucketDetails/DeleteEvent.tsx","screens/Console/Common/Hooks/useApi.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { NotificationConfig } from \"api/consoleApi\";\n\ninterface IDeleteEventProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n  bucketEvent: NotificationConfig | null;\n}\n\nconst DeleteEvent = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  bucketEvent,\n}: IDeleteEventProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    if (bucketEvent === null) {\n      return;\n    }\n\n    const events: string[] = get(bucketEvent, \"events\", []);\n    const prefix = get(bucketEvent, \"prefix\", \"\");\n    const suffix = get(bucketEvent, \"suffix\", \"\");\n\n    const cleanEvents = events.reduce((acc: string[], currVal: string) => {\n      if (!acc.includes(currVal)) {\n        return [...acc, currVal];\n      }\n      return acc;\n    }, []);\n\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/buckets/${selectedBucket}/events/${bucketEvent.arn}`,\n      {\n        events: cleanEvents,\n        prefix,\n        suffix,\n      },\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Event`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>Are you sure you want to delete this event?</Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteEvent;\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction,\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any, headers?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data, headers)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n"],"names":["_ref","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","bucketEvent","dispatch","useAppDispatch","deleteLoading","invokeDeleteApi","useApi","onDelSuccess","err","setErrorSnackMessage","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","events","get","prefix","suffix","cleanEvents","reduce","acc","currVal","includes","arn","onClose","confirmationContent","Fragment","children","onSuccess","onError","setIsLoading","useState","callApi","method","url","data","headers","api","invoke","then","res","catch"],"sourceRoot":""}