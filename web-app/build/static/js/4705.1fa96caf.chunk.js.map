{"version":3,"file":"static/js/4705.1fa96caf.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      users = [\" \"];\n\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURIComponent(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n"],"names":["_ref","onClose","modalOpen","title","children","wideLimit","titleIcon","iconColor","sx","dispatch","useAppDispatch","openSnackbar","setOpenSnackbar","useState","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","detailedErrorMsg","length","_jsxs","ModalBox","open","widthLimit","_jsx","MainError","isModal","Snackbar","closeSnackBar","mode","variant","autoHideDuration","condensed","noTitle","records","setRecords","loading","isLoading","filter","setFilter","currentPolicies","createUser","selectedPolicies","fetchPolicies","useCallback","api","policies","listPolicies","then","res","_res$data$policies","data","sort","policySort","catch","err","setModalErrorSnackMessage","filteredRecords","elementItem","name","includes","Grid","item","xs","className","ProgressBar","Fragment","SearchBox","placeholder","onChange","value","label","DataTable","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","Box","textAlign","padding","closeModalAndRefresh","selectedUser","selectedGroups","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","encodeURIComponent","groupPolicy","get","split","userPolicy","userName","ModalWrapper","FormLayout","withBorders","containerPadding","ReadBox","width","join","PolicySelectors","modalStyleUtils","modalButtonBar","Button","id","onClick","resetSelection","color","disabled","setPolicyAction","users","groups","accessKey"],"sourceRoot":""}