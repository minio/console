{"version":3,"file":"static/js/5128.a4f856c7.chunk.js","mappings":"6KAqCA,MAkJA,EAlJyBA,IAQC,IARA,SACxBC,EAAQ,KACRC,EAAI,MACJC,EAAK,QACLC,EAAU,GAAE,kBACZC,EAAoB,GAAE,SACtBC,EAAQ,WACRC,GAAa,GACKP,EAClB,MAAOQ,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAmB,CAAC,KAC5DC,GAAaC,EAAAA,EAAAA,cAGnBC,EAAAA,EAAAA,YAAU,KACR,GAC6B,IAA3BL,EAAgBM,QACO,KAAvBN,EAAgB,IAChBP,GACa,KAAbA,EACA,CACA,MAAMc,EAAgBd,EAASe,MAAM,KACrCD,EAAcE,KAAK,IAEnBR,EAAmBM,EACrB,IAGC,CAACd,EAAUO,KAGdK,EAAAA,EAAAA,YAAU,KACR,GAAIL,EAAgBM,OAAS,EAAG,CAC9B,MAAMI,EAAYP,EAAWQ,QACzBD,GACFA,EAAUE,gBAAe,EAE7B,IACC,CAACZ,EAAiBG,IAErB,MAAMU,GAAmBC,EAAAA,EAAAA,cACtBC,IACCjB,EAASiB,EAAU,GAErB,CAACjB,IAIGkB,GAAcC,EAAAA,EAAAA,SAAO,IAC3BZ,EAAAA,EAAAA,YAAU,KACR,GAAIW,EAAYL,QAEd,YADAK,EAAYL,SAAU,GAGxB,MAAMO,EAAiBlB,EACpBmB,QAAQC,GAA+B,KAAnBA,EAAQC,SAC5BC,KAAK,KAERT,EAAiBK,EAAe,GAG/B,CAAClB,IAGJ,MASMuB,EAAmBC,IACvBA,EAAEC,UAEF,IAAIC,EAAiB,IAAI1B,GACzB,MAAM2B,EAAQC,IAAIJ,EAAEK,OAAQ,gBAAiB,KAE7CH,EADiBI,SAASH,IACCH,EAAEK,OAAOE,MAEpC9B,EAAmByB,EAAe,EAG9BM,EAAShC,EAAgBiC,KAAI,CAACb,EAASO,KAEzCO,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,CAEPC,GAAI,GAAG1C,KAAQiC,EAAMU,aACrB1C,MAAO,GACPD,KAAM,GAAGA,KAAQiC,EAAMU,aACvBN,MAAO/B,EAAgB2B,GACvB7B,SAAUyB,EACVI,MAAOA,EACPW,YAAazC,EACb0C,YAAaZ,IAAU3B,EAAgBM,OAAS,GAAI4B,EAAAA,EAAAA,KAACM,EAAAA,IAAO,IAAM,KAClEC,cAAeA,KAhCCC,KACpB,GAAiD,KAA7CA,EAAWA,EAAWpC,OAAS,GAAGe,OAAe,CACnD,MAAMsB,EAAS,IAAID,GACnBC,EAAOlC,KAAK,IACZR,EAAmB0C,EACrB,GA4BMC,CAAa5C,EAAgB,GAV1B,aAAaN,KAAQiC,EAAMU,gBAgBtC,OACEH,EAAAA,EAAAA,KAACW,EAAAA,SAAQ,CAAAC,UACPC,EAAAA,EAAAA,MAACC,EAAAA,IAAG,CAACC,GAAI,CAAEC,QAAS,QAAUC,UAAW,YAAYL,SAAA,EACnDC,EAAAA,EAAAA,MAACK,EAAAA,IAAU,CACTH,GAAI,CACFI,WAAY,cACZP,SAAA,EAEFZ,EAAAA,EAAAA,KAAA,QAAAY,SAAOnD,IACM,KAAZC,IACCsC,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CACFC,GAAI,CACFK,WAAY,EACZJ,QAAS,OACTG,WAAY,SACZ,cAAe,CACbE,MAAO,KAETT,UAEFZ,EAAAA,EAAAA,KAACsB,EAAAA,IAAO,CAAC5D,QAASA,EAAS6D,UAAU,MAAKX,UACxCZ,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CAACG,UAAWvD,EAAQkD,UACtBZ,EAAAA,EAAAA,KAACwB,EAAAA,IAAQ,cAMnBX,EAAAA,EAAAA,MAACC,EAAAA,IAAG,CACFW,YAAa5D,EACbkD,GAAI,CACFM,MAAO,OACPK,UAAW,OACXC,OAAQ,IACRC,SAAU,YACVhB,SAAA,CAEDd,GACDE,EAAAA,EAAAA,KAAA,OAAK6B,IAAK5D,WAGL,C,+FC7If,MAAM6D,EAAWA,CAACC,EAAaC,EAAcC,KAC3C,IAAIC,EAAoB,WAATF,EAAoB,MAAQ,GAE3C,GAAIC,EAAS7D,OAAS,EAAG,CACvB,MAAM+D,EAAeF,EAASG,MAAMlD,GAAYA,EAAQ6C,MAAQA,IAE5DI,IACFD,EAAWC,EAAatC,OAAS,GAErC,CAEA,OAAOqC,CAAQ,EA0JjB,EAvJ0B5E,IAKA,IALC,SACzBM,EAAQ,OACRyE,EAAM,YACNC,EAAW,YACXC,GACkBjF,EAClB,MAAOkF,EAAaC,IAAkBzE,EAAAA,EAAAA,UAA0B,IAC1D0E,EAAkBL,GAAS,GAC3BM,EAAcL,GAAc,IAGlCnE,EAAAA,EAAAA,YAAU,KACR,MAAMyE,EAA0BP,EAAOtC,KAAK8C,IACP,CACjCd,IAAKc,EAAMrF,KACXqC,MAAOiC,EAASe,EAAMrF,KAAMqF,EAAMb,KAAMW,OAK5CF,EAAeG,EAAO,GAErB,CAACP,EAAQC,KAEZnE,EAAAA,EAAAA,YAAU,KACRP,EAAS4E,EAAY,GAEpB,CAACA,IAEJ,MAAMM,EAAkBA,CAACf,EAAalC,EAAeJ,KACnD,MAAMsD,EAAY,IAAIP,GACtB3C,EAAQA,EAAMV,OACd4D,EAAUtD,GAAS,CAAEsC,MAAKlC,SAE1B4C,EAAeM,EAAU,EAGrBC,EAAkBA,CAACH,EAAgBI,KACvC,MAAMC,EAAaV,EAAYS,GAE/B,GAAIC,EAAY,CAEd,MAAMC,EAAsB,OAAXZ,QAAW,IAAXA,OAAW,EAAXA,EAAc,GAAGW,EAAWnB,OAE7C,GAAIoB,EACF,OACEnD,EAAAA,EAAAA,KAACoD,EAAAA,IAAO,CACN3F,MAAOoF,EAAMpF,MACb4F,cACErD,EAAAA,EAAAA,KAACsD,EAAAA,IAAI,CACHL,MAAI,EACJlC,GAAI,CACFC,QAAS,OACTuC,eAAgB,WAChBC,aAAc,QACd5C,UAEFZ,EAAAA,EAAAA,KAACsB,EAAAA,IAAO,CACN5D,QAAS,8BAA8ByF,EAASZ,mCAChDhB,UAAW,OAAOX,UAElBZ,EAAAA,EAAAA,KAACyD,EAAAA,IAAW,CAACC,MAAO,CAAErC,MAAO,UAInCN,GAAI,CAAEM,MAAO,QAAST,SAErBuC,EAAStD,OAIlB,CAEA,OAAQgD,EAAMb,MACZ,IAAK,SACH,MAAMnC,EAAQqD,EAAaA,EAAWrD,MAAQ,MAE9C,OACEG,EAAAA,EAAAA,KAAC2D,EAAAA,IAAM,CACL/F,SAAW0B,IACT,MAAMO,EAAQP,EAAEK,OAAOiE,QAAU,KAAO,MACxCd,EAAgBD,EAAMrF,KAAMqC,EAAOoD,EAAK,EAE1C/C,GAAI2C,EAAMrF,KACVA,KAAMqF,EAAMrF,KACZC,MAAOoF,EAAMpF,MACboC,MAAO,YACPnC,QAASmF,EAAMnF,QACfkG,QAAmB,OAAV/D,IAGf,IAAK,MACH,OACEG,EAAAA,EAAAA,KAAC6D,EAAAA,EAAgB,CACftG,SAAU2F,EAAaA,EAAWrD,MAAQ,GAC1CpC,MAAOoF,EAAMpF,MACbD,KAAMqF,EAAMrF,KACZI,SAAWiC,IACT,IAAIiE,EAAQ,GAGVA,EADEC,MAAMC,QAAQnE,GACRA,EAAMT,KAAK,KAEXS,EAGViD,EAAgBD,EAAMrF,KAAMsG,EAAOb,EAAK,EAE1CvF,QAASmF,EAAMnF,QACfC,kBAAmBkF,EAAMzC,YACzBvC,YAAY,IAGlB,IAAK,UACH,OACEmC,EAAAA,EAAAA,KAACiE,EAAAA,IAAU,CACT/D,GAAI2C,EAAMrF,KACVA,KAAMqF,EAAMrF,KACZC,MAAOoF,EAAMpF,MACbC,QAASmF,EAAMnF,QACfmC,MAAOqD,EAAaA,EAAWrD,MAAQ,GACvCjC,SAAW0B,GAAMwD,EAAgBD,EAAMrF,KAAM8B,EAAEK,OAAOE,MAAOoD,GAC7D7C,YAAayC,EAAMzC,cAGzB,QACE,OACEJ,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,CACPC,GAAI2C,EAAMrF,KACVA,KAAMqF,EAAMrF,KACZC,MAAOoF,EAAMpF,MACbC,QAASmF,EAAMnF,QACfmC,MAAOqD,EAAaA,EAAWrD,MAAQ,GACvCjC,SAAW0B,GACTwD,EAAgBD,EAAMrF,KAAM8B,EAAEK,OAAOE,MAAOoD,GAE9C7C,YAAayC,EAAMzC,cAG3B,EAGF,OACEJ,EAAAA,EAAAA,KAACkE,EAAAA,IAAU,CAACzC,aAAa,EAAO0C,kBAAkB,EAAMvD,SACrD8B,EAAe3C,KAAI,CAAC8C,EAAOI,KAC1BjD,EAAAA,EAAAA,KAACW,EAAAA,SAAQ,CAAAC,SAAmBoC,EAAgBH,EAAOI,IAApCJ,EAAMrF,SAEZ,C","sources":["screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx","screens/Console/EventDestinations/ConfTargetGeneric.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  Fragment,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { AddIcon, Box, HelpIcon, InputBox, InputLabel, Tooltip } from \"mds\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange],\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <InputBox\n        key={`csv-multi-${name}-${index.toString()}`}\n        id={`${name}-${index.toString()}`}\n        label={\"\"}\n        name={`${name}-${index.toString()}`}\n        value={currentElements[index]}\n        onChange={onChangeElement}\n        index={index}\n        placeholder={commonPlaceholder}\n        overlayIcon={index === currentElements.length - 1 ? <AddIcon /> : null}\n        overlayAction={() => {\n          addEmptyLine(currentElements);\n        }}\n      />\n    );\n  });\n\n  return (\n    <Fragment>\n      <Box sx={{ display: \"flex\" }} className={\"inputItem\"}>\n        <InputLabel\n          sx={{\n            alignItems: \"flex-start\",\n          }}\n        >\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <Box className={tooltip}>\n                  <HelpIcon />\n                </Box>\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            width: \"100%\",\n            overflowY: \"auto\",\n            height: 150,\n            position: \"relative\",\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Box>\n    </Fragment>\n  );\n};\nexport default CSVMultiSelector;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  CommentBox,\n  ConsoleIcon,\n  FormLayout,\n  Grid,\n  InputBox,\n  ReadBox,\n  Switch,\n  Tooltip,\n} from \"mds\";\nimport { IElementValue, IOverrideEnv, KVField } from \"../Configurations/types\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  overrideEnv?: IOverrideEnv;\n}\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nconst valueDef = (key: string, type: string, defaults: IElementValue[]) => {\n  let defValue = type === \"on|off\" ? \"off\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value || \"\";\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  overrideEnv,\n}: IConfGenericProps) => {\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = fields.map((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      return stateInsert;\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    value = value.trim();\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    const holderItem = valueHolder[item];\n\n    if (holderItem) {\n      // Override Value with env var, we display generic string component\n      const override = overrideEnv?.[`${holderItem.key}`];\n\n      if (override) {\n        return (\n          <ReadBox\n            label={field.label}\n            actionButton={\n              <Grid\n                item\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"flex-end\",\n                  paddingRight: \"10px\",\n                }}\n              >\n                <Tooltip\n                  tooltip={`This value is set from the ${override.overrideEnv} environment variable`}\n                  placement={\"left\"}\n                >\n                  <ConsoleIcon style={{ width: 20 }} />\n                </Tooltip>\n              </Grid>\n            }\n            sx={{ width: \"100%\" }}\n          >\n            {override.value}\n          </ReadBox>\n        );\n      }\n    }\n\n    switch (field.type) {\n      case \"on|off\":\n        const value = holderItem ? holderItem.value : \"off\";\n\n        return (\n          <Switch\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"on\" : \"off\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"on\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={holderItem ? holderItem.value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string | string[]) => {\n              let valCh = \"\";\n\n              if (Array.isArray(value)) {\n                valCh = value.join(\",\");\n              } else {\n                valCh = value;\n              }\n\n              setValueElement(field.name, valCh, item);\n            }}\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBox\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e) => setValueElement(field.name, e.target.value, item)}\n            placeholder={field.placeholder}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      {fieldsElements.map((field, item) => (\n        <Fragment key={field.name}>{fieldDefinition(field, item)}</Fragment>\n      ))}\n    </FormLayout>\n  );\n};\n\nexport default ConfTargetGeneric;\n"],"names":["_ref","elements","name","label","tooltip","commonPlaceholder","onChange","withBorder","currentElements","setCurrentElements","useState","bottomList","createRef","useEffect","length","elementsSplit","split","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","filter","element","trim","join","onChangeElement","e","persist","updatedElement","index","get","target","parseInt","value","inputs","map","_jsx","InputBox","id","toString","placeholder","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","Fragment","children","_jsxs","Box","sx","display","className","InputLabel","alignItems","marginLeft","width","Tooltip","placement","HelpIcon","withBorders","overflowY","height","position","ref","valueDef","key","type","defaults","defValue","storedConfig","find","fields","defaultVals","overrideEnv","valueHolder","setValueHolder","fieldsElements","defValList","values","field","setValueElement","valuesDup","fieldDefinition","item","holderItem","override","ReadBox","actionButton","Grid","justifyContent","paddingRight","ConsoleIcon","style","Switch","checked","CSVMultiSelector","valCh","Array","isArray","CommentBox","FormLayout","containerPadding"],"sourceRoot":""}