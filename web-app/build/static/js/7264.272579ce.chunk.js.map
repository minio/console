{"version":3,"file":"static/js/7264.272579ce.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableQuota.tsx","screens/Console/Common/FormComponents/InputUnitMenu/InputUnitMenu.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  BucketQuotaIcon,\n  Button,\n  FormLayout,\n  InputBox,\n  Switch,\n  Grid,\n  ProgressBar,\n} from \"mds\";\nimport {\n  calculateBytes,\n  getBytes,\n  k8sScalarUnitsExcluding,\n} from \"../../../../common/utils\";\n\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { BucketQuota } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\n\ninterface IEnableQuotaProps {\n  open: boolean;\n  enabled: boolean;\n  cfg: BucketQuota | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableQuota = ({\n  open,\n  enabled,\n  cfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableQuotaProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [quotaEnabled, setQuotaEnabled] = useState<boolean>(false);\n  const [quotaSize, setQuotaSize] = useState<string>(\"1\");\n  const [quotaUnit, setQuotaUnit] = useState<string>(\"Ti\");\n  const [validInput, setValidInput] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (enabled) {\n      setQuotaEnabled(true);\n      if (cfg) {\n        const unitCalc = calculateBytes(cfg.quota || 0, true, false, true);\n\n        setQuotaSize(unitCalc.total.toString());\n        setQuotaUnit(unitCalc.unit);\n        setValidInput(true);\n      }\n    }\n  }, [enabled, cfg]);\n\n  useEffect(() => {\n    const valRegExp = /^\\d*(?:\\.\\d{1,2})?$/;\n\n    if (!quotaEnabled) {\n      setValidInput(true);\n      return;\n    }\n\n    setValidInput(valRegExp.test(quotaSize));\n  }, [quotaEnabled, quotaSize]);\n\n  const enableBucketEncryption = () => {\n    if (loading || !validInput) {\n      return;\n    }\n\n    api.buckets\n      .setBucketQuota(selectedBucket, {\n        enabled: quotaEnabled,\n        amount: parseInt(getBytes(quotaSize, quotaUnit, true)),\n        quota_type: \"hard\",\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Enable Bucket Quota\"\n      titleIcon={<BucketQuotaIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          enableBucketEncryption();\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          <Switch\n            value=\"bucket_quota\"\n            id=\"bucket_quota\"\n            name=\"bucket_quota\"\n            checked={quotaEnabled}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setQuotaEnabled(event.target.checked);\n            }}\n            label={\"Enabled\"}\n          />\n          {quotaEnabled && (\n            <InputBox\n              id=\"quota_size\"\n              name=\"quota_size\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setQuotaSize(e.target.value);\n                if (!e.target.validity.valid) {\n                  setValidInput(false);\n                } else {\n                  setValidInput(true);\n                }\n              }}\n              label=\"Quota\"\n              value={quotaSize}\n              required\n              min=\"1\"\n              overlayObject={\n                <InputUnitMenu\n                  id={\"quota_unit\"}\n                  onUnitChange={(newValue) => {\n                    setQuotaUnit(newValue);\n                  }}\n                  unitSelected={quotaUnit}\n                  unitsList={k8sScalarUnitsExcluding([\"Ki\"])}\n                  disabled={false}\n                />\n              }\n              error={!validInput ? \"Please enter a valid quota\" : \"\"}\n            />\n          )}\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={loading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              label={\"Cancel\"}\n            />\n\n            <Button\n              id={\"save\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={loading || !validInput}\n              label={\"Save\"}\n            />\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          )}\n        </FormLayout>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default EnableQuota;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { DropdownSelector, SelectorType } from \"mds\";\nimport styled from \"styled-components\";\nimport get from \"lodash/get\";\n\ninterface IInputUnitBox {\n  id: string;\n  unitSelected: string;\n  unitsList: SelectorType[];\n  disabled?: boolean;\n  onUnitChange?: (newValue: string) => void;\n}\n\nconst UnitMenuButton = styled.button(({ theme }) => ({\n  border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n  borderRadius: 3,\n  color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n  backgroundColor: get(theme, \"boxBackground\", \"#FBFAFA\"),\n  fontSize: 12,\n}));\n\nconst InputUnitMenu = ({\n  id,\n  unitSelected,\n  unitsList,\n  disabled = false,\n  onUnitChange,\n}: IInputUnitBox) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (newUnit: string) => {\n    setAnchorEl(null);\n    if (newUnit !== \"\" && onUnitChange) {\n      onUnitChange(newUnit);\n    }\n  };\n\n  return (\n    <Fragment>\n      <UnitMenuButton\n        id={`${id}-button`}\n        aria-controls={`${id}-menu`}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleClick}\n        disabled={disabled}\n        type={\"button\"}\n      >\n        {unitSelected}\n      </UnitMenuButton>\n      <DropdownSelector\n        id={\"upload-main-menu\"}\n        options={unitsList}\n        selectedOption={\"\"}\n        onSelect={(value) => handleClose(value)}\n        hideTriggerAction={() => {\n          handleClose(\"\");\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={\"end\"}\n      />\n    </Fragment>\n  );\n};\n\nexport default InputUnitMenu;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","open","enabled","cfg","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","loading","setLoading","useState","quotaEnabled","setQuotaEnabled","quotaSize","setQuotaSize","quotaUnit","setQuotaUnit","validInput","setValidInput","useEffect","unitCalc","calculateBytes","quota","total","toString","unit","test","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","BucketQuotaIcon","children","noValidate","autoComplete","onSubmit","e","preventDefault","api","buckets","setBucketQuota","amount","parseInt","getBytes","quota_type","then","catch","err","setModalErrorSnackMessage","errorToHandler","error","_jsxs","FormLayout","withBorders","containerPadding","Switch","value","id","name","checked","onChange","event","target","label","InputBox","validity","valid","required","min","overlayObject","InputUnitMenu","onUnitChange","newValue","unitSelected","unitsList","k8sScalarUnitsExcluding","disabled","Grid","item","xs","sx","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","ProgressBar","UnitMenuButton","styled","button","theme","border","get","borderRadius","color","backgroundColor","fontSize","_ref2","anchorEl","setAnchorEl","React","Boolean","handleClose","newUnit","Fragment","undefined","currentTarget","DropdownSelector","options","selectedOption","onSelect","hideTriggerAction","anchorOrigin","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","detailedErrorMsg","length","ModalBox","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}